{"version":3,"sources":["webpack:///./src/components/tag.js","webpack:///./src/components/BlogPostItem.js","webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["Tag","tag","to","key","className","BlogPostItem","node","title","frontmatter","fields","slug","tags","date","map","dangerouslySetInnerHTML","__html","description","excerpt","BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","location","React","Component","SEO","lang","meta","useStaticQuery","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"2FAAA,qCAeeA,IAZH,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACb,OACE,kBAAC,OAAD,CACEC,GAAE,SAAWD,EACbE,IAAKF,EACLG,UAAU,oFAETH,K,kHC2BQI,EAhCM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChBC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KAC9CC,EAAOL,EAAKE,YAAYG,KAE9B,OACE,yBAAKR,IAAKG,EAAKG,OAAOC,KAAMN,UAAU,kCACpC,yBAAKA,UAAU,qCACb,0BAAMA,UAAU,4BACbE,EAAKE,YAAYI,MAEpB,yBAAKR,UAAU,aACZO,EAAKE,KAAI,SAAAZ,GAAG,OACX,kBAAC,IAAD,CAAKA,IAAKA,EAAKE,IAAKF,SAI1B,kBAAC,OAAD,CACEC,GAAII,EAAKG,OAAOC,KAChBN,UAAU,kFAETG,GAEH,uBACEH,UAAU,aACVU,wBAAyB,CACvBC,OAAQT,EAAKE,YAAYQ,aAAeV,EAAKW,a,YCvBjDC,E,kGACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAalB,MACnCmB,EAAQN,EAAKO,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQC,SAAUR,KAAKC,MAAMO,SAAUtB,MAAOgB,GAC5C,kBAAC,IAAD,CAAKhB,MAAM,cACVmB,EAAMb,KAAI,YAAe,IAAZP,EAAW,EAAXA,KACZ,OAAO,kBAAC,EAAD,CAAcA,KAAMA,EAAMH,IAAKG,EAAKG,OAAOC,Y,GAVpCoB,IAAMC,WAiBfb,a,kCCxBf,0DAYA,SAASc,EAAT,GAAkD,IAAnChB,EAAkC,EAAlCA,YAAaiB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAM3B,EAAS,EAATA,MAC9BiB,EAASW,yBAAe,YAAxBX,KAcFY,EAAkBpB,GAAeQ,EAAKC,aAAaT,YAEzD,OACE,kBAAC,IAAD,CACEqB,eAAgB,CACdJ,QAEF1B,MAAOA,EACP+B,cAAa,QAAUd,EAAKC,aAAalB,MACzC2B,KAAM,CACJ,CACEK,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASjC,GAEX,CACEkC,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAShB,EAAKC,aAAaiB,QAE7B,CACEH,KAAK,gBACLC,QAASjC,GAEX,CACEgC,KAAK,sBACLC,QAASJ,IAEXO,OAAOT,KAKfF,EAAIY,aAAe,CACjBX,KAAK,KACLC,KAAM,GACNlB,YAAY,IAUCgB","file":"component---src-pages-index-js-fe6abb7e4e7665395c8e.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Tag = ({ tag }) => {\n  return (\n    <Link\n      to={`/tags/${tag}`}\n      key={tag}\n      className=\"px-2 py-1 bg-gray-600 text-gray-100 font-bold rounded hover:bg-gray-500 prose-sm\"\n    >\n      {tag}\n    </Link>\n  )\n}\n\nexport default Tag\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Tag from './tag'\n\nconst BlogPostItem = ({ node }) => {\n  const title = node.frontmatter.title || node.fields.slug\n  const tags = node.frontmatter.tags\n\n  return (\n    <div key={node.fields.slug} className=\"mx-auto max-w-prose px-10 py-6\">\n      <div className=\"flex justify-between items-center\">\n        <span className=\"font-light text-gray-600\">\n          {node.frontmatter.date}\n        </span>\n        <div className=\"space-x-2\">\n          {tags.map(tag => (\n            <Tag tag={tag} key={tag} />\n          ))}\n        </div>\n      </div>\n      <Link\n        to={node.fields.slug}\n        className=\"mt-2 prose-xl font-bold text-gray-700 shadow-none no-underline hover:underline\"\n      >\n        {title}\n      </Link>\n      <p\n        className=\"mt-2 prose\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  )\n}\n\nexport default BlogPostItem\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport BlogPostItem from '../components/BlogPostItem'\nimport SEO from '../components/seo'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        {posts.map(({ node }) => {\n          return <BlogPostItem node={node} key={node.fields.slug} />\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}