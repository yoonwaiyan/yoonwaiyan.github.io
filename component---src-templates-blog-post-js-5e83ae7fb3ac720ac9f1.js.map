{"version":3,"sources":["webpack:///./src/components/tag.js","webpack:///./src/components/seo.js","webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Tag","tag","to","key","className","SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Bio","social","href","twitter","target","rel","BlogPostTemplate","data","pageContext","location","post","markdownRemark","siteTitle","tags","frontmatter","previous","next","excerpt","date","map","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug"],"mappings":"2FAAA,qCAeeA,IAZH,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACb,OACE,kBAAC,OAAD,CACEC,GAAE,SAAWD,EACbE,IAAKF,EACLG,UAAU,oFAETH,K,kCCVP,0DAYMI,EAAM,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,kBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASL,IAEXQ,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,O,8ECxCAiB,EArCH,WACV,IADgB,EACHX,yBAAe,cAoBID,KAAKG,aAA7BM,EArBQ,EAqBRA,OAAQI,EArBA,EAqBAA,OAChB,OACE,yBAAKnB,UAAU,uBACZe,EADH,iCAEE,uBACEK,KAAI,uBAAyBD,EAAOE,QACpCrB,UAAU,8BACVsB,OAAO,SACPC,IAAI,cAJN,uB,8CC8CSC,UAvEU,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOH,EAAKI,eACZC,EAAYL,EAAKnB,KAAKG,aAAaJ,MACnC0B,EAAOH,EAAKI,YAAYD,KACtBE,EAAmBP,EAAnBO,SAAUC,EAASR,EAATQ,KAElB,OACE,kBAAC,IAAD,CAAQP,SAAUA,EAAUtB,MAAOyB,GACjC,kBAAC,IAAD,CACEzB,MAAOuB,EAAKI,YAAY3B,MACxBH,YAAa0B,EAAKI,YAAY9B,aAAe0B,EAAKO,UAGpD,yBAAKnC,UAAU,gEACb,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,qCACb,0BAAMA,UAAU,4BACb4B,EAAKI,YAAYI,OAItB,wBAAIpC,UAAU,kCACX4B,EAAKI,YAAY3B,OAGpB,yBAAKL,UAAU,kBACZ+B,EAAKM,KAAI,SAAAxC,GAAG,OACX,kBAAC,IAAD,CAAKA,IAAKA,QAId,yBACEG,UAAU,aACVsC,wBAAyB,CAAEC,OAAQX,EAAKY,SAG5C,yBAAKxC,UAAU,QACb,kBAAC,EAAD,MAEA,wBACEyC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGb,GACC,kBAAC,OAAD,CAAMnC,GAAImC,EAASc,OAAOC,KAAMzB,IAAI,QAApC,KACKU,EAASD,YAAY3B,QAI9B,4BACG6B,GACC,kBAAC,OAAD,CAAMpC,GAAIoC,EAAKa,OAAOC,KAAMzB,IAAI,QAC7BW,EAAKF,YAAY3B,MADpB","file":"component---src-templates-blog-post-js-5e83ae7fb3ac720ac9f1.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Tag = ({ tag }) => {\n  return (\n    <Link\n      to={`/tags/${tag}`}\n      key={tag}\n      className=\"px-2 py-1 bg-gray-600 text-gray-100 font-bold rounded hover:bg-gray-500 prose-sm\"\n    >\n      {tag}\n    </Link>\n  )\n}\n\nexport default Tag\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpeg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div className=\"flex flex-col mb-10\">\n      {author}'s sharing on web development.\n      <a\n        href={`https://twitter.com/${social.twitter}`}\n        className=\"shadow-none hover:underline\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Follow on Twitter\n      </a>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Tag from '../components/tag'\n\nimport '../styles/global.css'\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const tags = post.frontmatter.tags\n  const { previous, next } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n\n      <div className=\"mx-auto w-screen xl:w-max max-w-prose px-10 py-6 break-words\">\n        <div className=\"divide-y-2 divide-solid\">\n          <div className=\"pb-6\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"font-light text-gray-600\">\n                {post.frontmatter.date}\n              </span>\n            </div>\n\n            <h1 className=\"mt-2 prose prose-2xl font-bold\">\n              {post.frontmatter.title}\n            </h1>\n\n            <div className=\"mt-2 space-x-2\">\n              {tags.map(tag => (\n                <Tag tag={tag} />\n              ))}\n            </div>\n\n            <div\n              className=\"prose mt-2\"\n              dangerouslySetInnerHTML={{ __html: post.html }}\n            />\n          </div>\n          <div className=\"pt-6\">\n            <Bio />\n\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={previous.fields.slug} rel=\"prev\">\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n  }\n`\n"],"sourceRoot":""}