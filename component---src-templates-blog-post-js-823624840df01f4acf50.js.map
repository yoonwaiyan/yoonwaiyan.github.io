{"version":3,"file":"component---src-templates-blog-post-js-823624840df01f4acf50.js","mappings":"uJA6CA,IAnCY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OACvC,OACE,uBAAKC,UAAU,uBACZJ,EAAOK,KADV,iCAEE,qBACEC,KAAI,uBAAyBH,EAAOI,QACpCH,UAAU,8BACVI,OAAO,SACPC,IAAI,cAJN,wB,uDCrBAC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9Bb,GAASF,EAAAA,EAAAA,gBAAe,cAAxBE,KAgBFc,EAAkBJ,GAAeV,EAAKC,aAAaS,YACnDK,EAAY,UAAGf,EAAKC,oBAAR,aAAG,EAAmBY,MAExC,OACE,gBAAC,IAAD,CACEG,eAAgB,CACdL,KAAAA,GAEFE,MAAOA,EACPI,cAAeF,EAAY,QAAWA,EAAiB,KACvDH,KAAM,CACJ,CACER,KAAK,cACLc,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASL,GAEX,CACEM,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACEd,KAAK,eACLc,QAAQ,WAEV,CACEd,KAAK,kBACLc,SAAS,UAAAlB,EAAKC,oBAAL,mBAAmBC,cAAnB,eAA2BI,UAA3B,IAEX,CACEF,KAAK,gBACLc,QAASL,GAEX,CACET,KAAK,sBACLc,QAASJ,IAEXM,OAAOR,MAKfH,EAAIY,aAAe,CACjBV,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,6CC3EA,IAZY,SAAC,GAAa,IAAXY,EAAU,EAAVA,IACb,OACE,gBAAC,EAAAC,KAAD,CACEC,GAAE,SAAWF,EACbG,IAAKH,EACLnB,UAAU,oFAETmB,K,4FCoEP,UAtEyB,SAAC,GAAwB,IAAD,EAArBzB,EAAqB,EAArBA,KAAM6B,EAAe,EAAfA,SAC1BC,EAAO9B,EAAK+B,eACZC,GAAY,UAAAhC,EAAKG,KAAKC,oBAAV,eAAwBY,QAAxB,QACZiB,EAAOH,EAAKI,YAAYD,KACtBE,EAAmBnC,EAAnBmC,SAAUC,EAASpC,EAAToC,KAElB,OACE,gBAAC,IAAD,CAAQP,SAAUA,EAAUb,MAAOgB,GACjC,gBAAC,IAAD,CACEhB,MAAOc,EAAKI,YAAYlB,MACxBH,YAAaiB,EAAKI,YAAYrB,aAAeiB,EAAKO,UAEpD,uBAAK/B,UAAU,gEACb,uBAAKA,UAAU,2BACb,uBAAKA,UAAU,QACb,uBAAKA,UAAU,qCACb,wBAAMA,UAAU,8CACbwB,EAAKI,YAAYI,OAItB,sBAAIhC,UAAU,oDACXwB,EAAKI,YAAYlB,OAGpB,uBAAKV,UAAU,kBACZ2B,EAAKM,KAAI,SAAAd,GAAG,OACX,gBAAC,IAAD,CAAKG,IAAKH,EAAKA,IAAKA,QAIxB,uBACEnB,UAAU,+BACVkC,wBAAyB,CAAEC,OAAQX,EAAKY,SAG5C,uBAAKpC,UAAU,QACb,gBAAC,IAAD,MAEA,sBACEqC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGb,GACC,gBAAC,EAAAT,KAAD,CAAMC,GAAIQ,EAASc,OAAOC,KAAMvC,IAAI,QAApC,KACKwB,EAASD,YAAYlB,QAI9B,0BACGoB,GACC,gBAAC,EAAAV,KAAD,CAAMC,GAAIS,EAAKa,OAAOC,KAAMvC,IAAI,QAC7ByB,EAAKF,YAAYlB,MADpB","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/tag.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n  return (\n    <div className=\"flex flex-col mb-10\">\n      {author.name}'s sharing on web development.\n      <a\n        href={`https://twitter.com/${social.twitter}`}\n        className=\"shadow-none hover:underline\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Follow on Twitter\n      </a>\n    </div>\n  )\n}\n\nexport default Bio\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Tag = ({ tag }) => {\n  return (\n    <Link\n      to={`/tags/${tag}`}\n      key={tag}\n      className=\"px-2 py-1 bg-gray-600 text-gray-100 font-bold rounded hover:bg-gray-500 prose-sm\"\n    >\n      {tag}\n    </Link>\n  )\n}\n\nexport default Tag\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Tag from \"../components/tag\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const tags = post.frontmatter.tags\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <div className=\"mx-auto w-screen xl:w-max max-w-prose px-10 py-6 break-words\">\n        <div className=\"divide-y-2 divide-solid\">\n          <div className=\"pb-6\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"font-light text-gray-600 dark:text-gray-50\">\n                {post.frontmatter.date}\n              </span>\n            </div>\n\n            <h1 className=\"mt-2 prose prose-2xl font-bold dark:text-gray-50\">\n              {post.frontmatter.title}\n            </h1>\n\n            <div className=\"mt-2 space-x-2\">\n              {tags.map(tag => (\n                <Tag key={tag} tag={tag} />\n              ))}\n            </div>\n\n            <div\n              className=\"prose mt-2 dark:text-gray-50\"\n              dangerouslySetInnerHTML={{ __html: post.html }}\n            />\n          </div>\n          <div className=\"pt-6\">\n            <Bio />\n\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={previous.fields.slug} rel=\"prev\">\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","name","href","twitter","target","rel","Seo","description","lang","meta","title","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","concat","defaultProps","tag","Link","to","key","location","post","markdownRemark","siteTitle","tags","frontmatter","previous","next","excerpt","date","map","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug"],"sourceRoot":""}