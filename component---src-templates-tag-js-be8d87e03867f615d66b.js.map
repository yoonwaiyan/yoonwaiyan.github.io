{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["Tag","_ref","data","location","pageContext","tag","ghostTag","posts","allGhostPost","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","_components_common_meta__WEBPACK_IMPORTED_MODULE_4__","type","_components_common__WEBPACK_IMPORTED_MODULE_3__","className","name","description","map","_ref2","node","key","id","post","propTypes","PropTypes","shape","string","isRequired","object","pathname","pageQuery"],"mappings":"uMAaMA,EAAM,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,SAAUC,EAAkBH,EAAlBG,YACrBC,EAAMH,EAAKI,SACXC,EAAQL,EAAKM,aAAaC,MAEhC,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIZ,KAAMA,EACNC,SAAUA,EACVY,KAAK,WAETL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACXP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cACdP,EAAAC,EAAAC,cAAA,UAAKP,EAAIa,MACRb,EAAIc,YAAcT,EAAAC,EAAAC,cAAA,SAAIP,EAAIc,aAAmB,MAElDT,EAAAC,EAAAC,cAAA,WAASK,UAAU,aACdV,EAAMa,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAEPZ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAUO,IAAKD,EAAKE,GAAIC,KAAMH,OAGtCZ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAYZ,YAAaA,QAO7CJ,EAAI0B,UAAY,CACZxB,KAAMyB,IAAUC,MAAM,CAClBtB,SAAUqB,IAAUC,MAAM,CACtBV,KAAMS,IAAUE,OAAOC,WACvBX,YAAaQ,IAAUE,SAE3BrB,aAAcmB,IAAUI,OAAOD,aAChCA,WACH3B,SAAUwB,IAAUC,MAAM,CACtBI,SAAUL,IAAUE,OAAOC,aAC5BA,WACH1B,YAAauB,IAAUI,QAGZ/B,YAER,IAAMiC,EAAS","file":"component---src-templates-tag-js-be8d87e03867f615d66b.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Layout, PostCard, Pagination } from '../components/common'\nimport { MetaData } from '../components/common/meta'\n\n/**\n* Tag page (/tag/:slug)\n*\n* Loads all posts for the requested tag incl. pagination.\n*\n*/\nconst Tag = ({ data, location, pageContext }) => {\n    const tag = data.ghostTag\n    const posts = data.allGhostPost.edges\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"series\"\n            />\n            <Layout>\n                <div className=\"container\">\n                    <header className=\"tag-header\">\n                        <h1>{tag.name}</h1>\n                        {tag.description ? <p>{tag.description}</p> : null }\n                    </header>\n                    <section className=\"post-feed\">\n                        {posts.map(({ node }) => (\n                            // The tag below includes the markup for each post - components/common/PostCard.js\n                            <PostCard key={node.id} post={node} />\n                        ))}\n                    </section>\n                    <Pagination pageContext={pageContext} />\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nTag.propTypes = {\n    data: PropTypes.shape({\n        ghostTag: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            description: PropTypes.string,\n        }),\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.object,\n}\n\nexport default Tag\n\nexport const pageQuery = graphql`\n    query GhostTagQuery($slug: String!, $limit: Int!, $skip: Int!) {\n        ghostTag(slug: { eq: $slug }) {\n            ...GhostTagFields\n        }\n        allGhostPost(\n            sort: { order: DESC, fields: [published_at] },\n            filter: {tags: {elemMatch: {slug: {eq: $slug}}}},\n            limit: $limit,\n            skip: $skip\n        ) {\n            edges {\n                node {\n                ...GhostPostFields\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}