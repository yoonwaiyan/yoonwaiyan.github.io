{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-08-10---how-to-receive-emails-in-your-rails-application/","webpackCompilationHash":"d239d78f62d838a466bb","result":{"data":{"site":{"siteMetadata":{"title":"Today I Learned","author":"Waiyan Yoon"}},"markdownRemark":{"id":"494e9f5e-d1f0-5273-8c74-56667c3e9b63","excerpt":"There are times when a Rails app needs to receive emails to process the content, or grab the file from the attachment and process data within the file. In this…","html":"<p>There are times when a Rails app needs to receive emails to process the content, or grab the file from the attachment and process data within the file. In this case <a href=\"https://github.com/thoughtbot/griddler\">griddler gem</a> would be the best bet to parse the incoming emails with its built-in controller action, but it seems tricky to follow through the documentations and I have to adapt an apparent syntax change which caused an issue if I follow the instructions blindly. Here is my version of the guide, hope you find it helpful.</p>\n<p>The first step is that you’ll need to find an email deliver service provider to help receive and send your emails. Mailgun and SendGrid would be a good choice as they are free to use for small personal projects. After that, follow through the instructions as given by the service so that they could properly receive and send emails.</p>\n<p>After that, you’ll need to setup the service to receive emails and “forward” it to your app. To test this out, you’ll need to expose your local development web server to the public through services such as <a href=\"https://localtunnel.github.io/www/\">localtunnel</a> or <a href=\"https://ngrok.com/\">ngrok</a>. By default griddler gem handles the incoming emails in <code class=\"language-text\">/email_processor</code> route, so your setup should include a setting to route your emails through HTTP request to your local web server, such as <code class=\"language-text\">https://test-localtunnel-11.localtunnel.me/email_processor</code>.</p>\n<p>Now finally it’s time to dive in the code. The code snippets below are based on Mailgun service that I configured personally, feel free to substitute with other adapters available to griddler.</p>\n<p>Add these gems to your Gemfile:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gem &#39;griddler&#39;\ngem &#39;griddler-mailgun&#39;</code></pre></div>\n<p>And configure your griddler to use the adapter of your choice:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">Griddler</span><span class=\"token punctuation\">.</span>configure <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>config<span class=\"token operator\">|</span>\n  config<span class=\"token punctuation\">.</span>email_service <span class=\"token operator\">=</span> <span class=\"token symbol\">:mailgun</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Add <code class=\"language-text\">mount_griddler</code> for the simplest configuration provided by Griddler gem by default. This handles <code class=\"language-text\">/email_processor</code> route that is handled by <code class=\"language-text\">Griddler::EmailsController</code> controller provided by the gem.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">Rails</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span>routes<span class=\"token punctuation\">.</span>draw <span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># ...</span>\n  mount_griddler\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Add new file named <code class=\"language-text\">app/models/email_processor.rb</code> with the following code as a template. Note that this section is different from other guides as there seems to be a new syntax being introduced in the gem, as now an instance of <code class=\"language-text\">EmailProcessor</code> class will be created before <code class=\"language-text\">process</code> instance method is called (used to be a class method).</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailProcessor</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@email</span> <span class=\"token operator\">=</span> email\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">process</span></span>\n    puts <span class=\"token string\">\"received email from <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span><span class=\"token variable\">@email</span><span class=\"token punctuation\">.</span>from<span class=\"token delimiter tag\">}</span></span>:\"</span>\n    p <span class=\"token variable\">@email</span><span class=\"token punctuation\">.</span>body\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Now you can try send an email to your configured domain and observe your local webserver to make sure everything works fine. Advanced configurations (such as handling the route manually or customize your email processor class) is available at the gem README.</p>\n<p>Hope this clarifies out the way to receive emails from your Rails app.</p>\n<p>External Readings:</p>\n<ol>\n<li><a href=\"https://sendgrid.com/blog/receiving-email-in-your-rails-app-with-griddler/\">Receiving Email in Your Rails App With Griddler</a></li>\n<li><a href=\"https://robots.thoughtbot.com/griddler-is-better-than-ever\">Griddler is Better Than Ever!</a></li>\n<li><a href=\"https://github.com/thoughtbot/griddler\">griddler gem</a></li>\n</ol>","frontmatter":{"title":"How to Receive Emails in Your Rails Application","date":"August 10, 2018","description":"","tags":["rails"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2018-08-10---how-to-receive-emails-in-your-rails-application/","previous":{"fields":{"slug":"/blog/2018-06-08---understanding-basics-of-react-context/"},"frontmatter":{"title":"Understanding Basics of React Context"}},"next":{"fields":{"slug":"/blog/2019-05-22---introduction-to-promise/"},"frontmatter":{"title":"JavaScript Promise and Async / Await Part 1: Introduction to Promise"}}}}}