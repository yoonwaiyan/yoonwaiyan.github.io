<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Today I Learned]]></title><description><![CDATA[(dev) things I learned or experimented.]]></description><link>https://gatsby.ghost.org/</link><image><url>https://gatsby.ghost.org/favicon.png</url><title>Today I Learned</title><link>https://gatsby.ghost.org/</link></image><generator>Ghost 2.9</generator><lastBuildDate>Tue, 14 May 2019 01:53:51 GMT</lastBuildDate><atom:link href="https://gatsby.ghost.org/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[How to Receive Emails in Your Rails Application]]></title><description><![CDATA[There are times when a Rails app needs to receive emails to process the content,
or grab the file from the attachment and process data within the file. In this
case griddler gem [https://github.com/thoughtbot/griddler]  would be the best
bet to parse the incoming emails with its built-in controller action, but it
seems tricky to follow through the documentations and I have to adapt an
apparent syntax change which caused an issue if I follow the instructions
blindly. Here is my version of the gui]]></description><link>http://waiyanyoon.com/how-to-receive-emails-in-your-rails-application/</link><guid isPermaLink="false">Ghost__Post__5b6d9c3dbd54885f920892c1</guid><category><![CDATA[rails]]></category><dc:creator><![CDATA[Yoon Wai Yan]]></dc:creator><pubDate>Fri, 10 Aug 2018 15:14:59 GMT</pubDate><content:encoded><![CDATA[<p>There are times when a Rails app needs to receive emails to process the content, or grab the file from the attachment and process data within the file. In this case <a href="https://github.com/thoughtbot/griddler">griddler gem</a> would be the best bet to parse the incoming emails with its built-in controller action, but it seems tricky to follow through the documentations and I have to adapt an apparent syntax change which caused an issue if I follow the instructions blindly. Here is my version of the guide, hope you find it helpful.</p>
<p>The first step is that you'll need to find an email deliver service provider to help receive and send your emails. Mailgun and SendGrid would be a good choice as they are free to use for small personal projects. After that, follow through the instructions as given by the service so that they could properly receive and send emails.</p>
<p>After that, you'll need to setup the service to receive emails and &quot;forward&quot; it to your app. To test this out, you'll need to expose your local development web server to the public through services such as <a href="https://localtunnel.github.io/www/">localtunnel</a> or <a href="https://ngrok.com/">ngrok</a>. By default griddler gem handles the incoming emails in <code>/email_processor</code> route, so your setup should include a setting to route your emails through HTTP request to your local web server, such as <code>https://test-localtunnel-11.localtunnel.me/email_processor</code>.</p>
<p>Now finally it's time to dive in the code. The code snippets below are based on Mailgun service that I configured personally, feel free to substitute with other adapters available to griddler.</p>
<p>Add these gems to your Gemfile:</p>
<pre><code>gem 'griddler'
gem 'griddler-mailgun'
</code></pre>
<p>And configure your griddler to use the adapter of your choice:</p>
<pre><code class="language-ruby">Griddler.configure do |config|
  config.email_service = :mailgun
end
</code></pre>
<p>Add <code>mount_griddler</code> for the simplest configuration provided by Griddler gem by default. This handles <code>/email_processor</code> route that is handled by <code>Griddler::EmailsController</code> controller provided by the gem.</p>
<pre><code class="language-ruby">Rails.application.routes.draw do
  # ...
  mount_griddler
end
</code></pre>
<p>Add new file named <code>app/models/email_processor.rb</code> with the following code as a template. Note that this section is different from other guides as there seems to be a new syntax being introduced in the gem, as now an instance of <code>EmailProcessor</code> class will be created before <code>process</code> instance method is called (used to be a class method).</p>
<pre><code class="language-ruby">class EmailProcessor
  def initialize(email)
    @email = email
  end

  def process
    puts &quot;received email from #{@email.from}:&quot;
    p @email.body
  end
end
</code></pre>
<p>Now you can try send an email to your configured domain and observe your local webserver to make sure everything works fine. Advanced configurations (such as handling the route manually or customize your email processor class) is available at the gem README.</p>
<p>Hope this clarifies out the way to receive emails from your Rails app.</p>
<p>External Readings:</p>
<ol>
<li><a href="https://sendgrid.com/blog/receiving-email-in-your-rails-app-with-griddler/">Receiving Email in Your Rails App With Griddler</a></li>
<li><a href="https://robots.thoughtbot.com/griddler-is-better-than-ever">Griddler is Better Than Ever!</a></li>
<li><a href="https://github.com/thoughtbot/griddler">griddler gem</a></li>
</ol>
]]></content:encoded></item><item><title><![CDATA[Understanding Basics of React Context]]></title><description><![CDATA[Use React Context to reduce delegation of properties across a component tree.]]></description><link>http://waiyanyoon.com/understanding-basics-of-react-context/</link><guid isPermaLink="false">Ghost__Post__5b1a743fbd54885f920892ab</guid><category><![CDATA[React]]></category><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Yoon Wai Yan]]></dc:creator><pubDate>Fri, 08 Jun 2018 13:40:25 GMT</pubDate><content:encoded><![CDATA[<p>The use of React Context with renderProps that's introduced since React v16.3 is highly being recommended in React community to pass global level variables to child components, especially when the passing of the props from parent component to deep levels of child components, for example:</p>
<p>The code snippet before using React Context:</p>
<pre><code class="language-javascript">import React from 'react';
// ...

const LoggedInUser = ({ user: { name } }) =&gt; (
  &lt;Fragment&gt;
    &lt;span&gt;Logged in as {name}&lt;/span&gt;
  &lt;/Fragment&gt;
);

const Navbar = ({ menu, user }) =&gt; (
  &lt;div&gt;
    &lt;NavigationMenu menus={menu} /&gt;
    &lt;LoggedInUser user={user} /&gt;
  &lt;/div&gt;
);

class Dashboard extends PureComponent {
  render() {
    const menu = [
      { name: 'Home', url: '/' },
      { name: 'Preferences', url: '/preferences' }
    ];

    // user is available at higher level of component
    const { user, posts } = this.props;

    return (
      &lt;Fragment&gt;
        &lt;Navbar menu={menu} user={user} /&gt;
        {posts.map(post =&gt; &lt;BlogPost post={post} /&gt;)}
      &lt;/Fragment&gt;
    );
  }
}

class App extends Component {
  state = {
    user: {}
  };

  componentDidMount() {
    fetchUser().then(user =&gt; {
      this.setState({ user });
    });
  }

  render() {
    const { user } = this.state;

    return (
      &lt;div&gt;
        &lt;Route url=&quot;/&quot; render={() =&gt; &lt;Dashboard user={user} /&gt;} /&gt;
      &lt;/div&gt;
    );
  }
}

</code></pre>
<p>You'll notice the use of <code>user</code> is delegated from <code>Dashboard</code> component down to <code>LoggedInUser</code> without being used by the components along the delegation. It increases complexity when the prop is delegated in a handful of levels down especially when there are multiple props being passed down, which is the case of the React codebase of my company project.</p>
<p>Now we're going to replace the props delegation with React.Context. We first create an Auth React Context:</p>
<pre><code class="language-javascript">import React, { createContext } from 'react';

const AuthContext = createContext({ isLoggedIn: false, user: {} });

export default AuthContext;
</code></pre>
<p><code>createContext()</code> will create two sub-components: <code>Provider</code> and <code>Consumer</code>. <code>Consumer</code> provides render props of an object that contains <code>isLoggedIn</code> and <code>user</code> properties. Now we 'll consume the user object in <code>Navbar</code> and remove the props from <code>Dashboard</code>:</p>
<pre><code class="language-javascript">import React from 'react';
import AuthContext from './AuthContext';

// ...

// use AuthContext.Consumer to obtain user object
const Navbar = ({ menu, user }) =&gt; (
  &lt;div&gt;
    &lt;NavigationMenu menus={menu} /&gt;
    &lt;AuthContext.Consumer&gt;
      {({ isAuth, user }) =&gt; &lt;LoggedInUser user={user} /&gt;}
    &lt;/AuthContext.Consumer&gt;
  &lt;/div&gt;
);

class Dashboard extends Component {
  render() {
    const menu = [
      { name: 'Home', url: '/' },
      { name: 'Preferences', url: '/preferences' }
    ];

    const { posts } = this.props;

    // now we removed user from the list of props
    return (
      &lt;Fragment&gt;
        &lt;Navbar menu={menu} /&gt;
        {posts.map(post =&gt; &lt;BlogPost post={post} /&gt;)}
      &lt;/Fragment&gt;
    );
  }
}

// ...
</code></pre>
<p>By using <code>AuthContext.Consumer</code>, we're able to access the <code>user</code> object directly without passing it from <code>Dashboard</code> component, but when we try to log user to the console, it appears that user is an empty object. This is because the default value provided by <code>AuthContext</code> is an empty user. Now we'll set the value of user using <code>AuthContext.Provider</code>:</p>
<pre><code class="language-javascript">// ...

class App extends Component {
  state = {
    user: {},
    isLoggedIn: false
  };

  componentDidMount() {
    fetchUser().then(user =&gt; {
      this.setState({ user, isLoggedIn: true });
    });
  }

  render() {
    const { user } = this.state;

    return (
      &lt;div&gt;
        &lt;AuthContext.Provider value={{ user, isLoggedIn }}&gt;
          &lt;Route url=&quot;/&quot; component={Dashboard} /&gt;
        &lt;/AuthContext.Provider&gt;
      &lt;/div&gt;
    );
  }
}

// ...
</code></pre>
<p>Now we have the user information available in the Consumer!</p>
<hr>
<p>React Context is especially useful for:</p>
<ol>
<li>User authentication and routes management</li>
<li>Locale and translations management</li>
<li>Theme or display settings</li>
<li>Modal management</li>
<li>State management (instead of Redux)</li>
</ol>
<p>The use of each example above is available in the external links provided below. Currently React Context is only used for ActionCable web socket configuration in our project as we've just upgraded the React version to version 16.3.2. There is a good chance of using it for other purposes within the project to clean up the deep delegation of certain properties.</p>
<h3 id="externallinks">External links:</h3>
<ol>
<li><a href="https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a">https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a</a></li>
<li><a href="https://codeburst.io/what-can-react-context-api-do-for-you-multi-language-text-modals-and-theme-switchers-9cfbc8e5ee5e">https://codeburst.io/what-can-react-context-api-do-for-you-multi-language-text-modals-and-theme-switchers-9cfbc8e5ee5e</a></li>
<li><a href="https://reactjs.org/docs/context.html">https://reactjs.org/docs/context.html</a></li>
</ol>
</hr>]]></content:encoded></item><item><title><![CDATA[Convert API Result Hash to Ruby Objects]]></title><description><![CDATA[This post shows how API result returned in hash in Ruby is better when it's converted to objects, and formatting camel case hash keys to use snake case using a Rails helper method to make it more Ruby-ish.]]></description><link>http://waiyanyoon.com/convert-api-result-hash-to-ruby-objects/</link><guid isPermaLink="false">Ghost__Post__5ae9be9ebd54885f92089298</guid><category><![CDATA[ruby]]></category><category><![CDATA[rails]]></category><category><![CDATA[api]]></category><category><![CDATA[json]]></category><dc:creator><![CDATA[Yoon Wai Yan]]></dc:creator><pubDate>Wed, 02 May 2018 14:40:20 GMT</pubDate><content:encoded><![CDATA[<p>Note: Examples shown in this post are a fraction or a sample response returned from Lazada Open Platform:</p>
<p>Without a sophisticated Ruby SDK, REST APIs return queries in JSON format. This is how we normally handle the results returned from API in Ruby:</p>
<pre><code class="language-ruby">result = [{&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;name&quot;, &quot;input_type&quot;=&gt;&quot;text&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Name&quot;},
 {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;short_description&quot;, &quot;input_type&quot;=&gt;&quot;richText&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Highlights&quot;},
 {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;description&quot;, &quot;input_type&quot;=&gt;&quot;richText&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;0, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Product Description&quot;},
 {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;video&quot;, &quot;input_type&quot;=&gt;&quot;text&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;0, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Video URL&quot;},
 {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;brand&quot;, &quot;input_type&quot;=&gt;&quot;singleSelect&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Brand&quot;},
 {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;model&quot;, &quot;input_type&quot;=&gt;&quot;text&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Model&quot;}]
</code></pre>
<p>Take a look at the first element in the array:</p>
<pre><code class="language-ruby">&gt; a_hash = result.first
# =&gt; {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;name&quot;, &quot;input_type&quot;=&gt;&quot;text&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Name&quot;}
</code></pre>
<p>In this way the value <code>input_type</code> can be obtained by the hash key:</p>
<pre><code class="language-ruby">&gt; a_hash[&quot;input_type&quot;]
# =&gt; &quot;text&quot;
</code></pre>
<p>This is acceptable in cases where the hash is not frequently being accessed. But in cases of heavy usage especially when processing multiple API results, you can make your code better or tidier by converting the API result from hash to an object:</p>
<pre><code class="language-ruby">&gt; category_attributes = JSON.parse(result.to_json, object_class: OpenStruct)
=&gt; [#&lt;OpenStruct is_sale_prop=0, name=&quot;name&quot;, input_type=&quot;text&quot;, options=[], is_mandatory=1, attribute_type=&quot;normal&quot;, label=&quot;Name&quot;&gt;,
 #&lt;OpenStruct is_sale_prop=0, name=&quot;short_description&quot;, input_type=&quot;richText&quot;, options=[], is_mandatory=1, attribute_type=&quot;normal&quot;, label=&quot;Highlights&quot;&gt;,
 #&lt;OpenStruct is_sale_prop=0, name=&quot;description&quot;, input_type=&quot;richText&quot;, options=[], is_mandatory=0, attribute_type=&quot;normal&quot;, label=&quot;Product Description&quot;&gt;,
 #&lt;OpenStruct is_sale_prop=0, name=&quot;video&quot;, input_type=&quot;text&quot;, options=[], is_mandatory=0, attribute_type=&quot;normal&quot;, label=&quot;Video URL&quot;&gt;,
 #&lt;OpenStruct is_sale_prop=0, name=&quot;brand&quot;, input_type=&quot;singleSelect&quot;, options=[], is_mandatory=1, attribute_type=&quot;normal&quot;, label=&quot;Brand&quot;&gt;,
 #&lt;OpenStruct is_sale_prop=0, name=&quot;model&quot;, input_type=&quot;text&quot;, options=[], is_mandatory=1, attribute_type=&quot;normal&quot;, label=&quot;Model&quot;&gt;]
</code></pre>
<p>Now we can access the attribute directly:</p>
<pre><code class="language-ruby"># get the value via object attribute
&gt; category_attributes.first.input_type
=&gt; &quot;text&quot;

# you can treat it as a hash too
&gt; category_attributes.first[&quot;input_type&quot;]
=&gt; &quot;text&quot;
</code></pre>
<p>Sometimes you have API result which is returned as camel case, but snake case is the de facto standard in Ruby. The example below shows the that camel case is being used in some keys e.g. <code>Status</code>, <code>SellerSku</code> and <code>ShopSku</code>.</p>
<pre><code class="language-ruby">response = {&quot;code&quot;=&gt;&quot;0&quot;,
 &quot;data&quot;=&gt;
  {&quot;total_products&quot;=&gt;&quot;10&quot;,
   &quot;products&quot;=&gt;
    [{&quot;skus&quot;=&gt;
       [{&quot;Status&quot;=&gt;&quot;active&quot;,
         &quot;quantity&quot;=&gt;0,
         &quot;product_weight&quot;=&gt;&quot;0.03&quot;,
         &quot;Image2&quot;=&gt;&quot;http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg&quot;,
         &quot;SellerSku&quot;=&gt;&quot;39817:01:01&quot;,
         &quot;ShopSku&quot;=&gt;&quot;BU565ELAX8AGSGAMZ-1104491&quot;,
         &quot;Url&quot;=&gt;&quot;https://alice.lazada.sg/asd-1083832.html&quot;,
         &quot;package_width&quot;=&gt;&quot;10.00&quot;,
         &quot;special_to_time&quot;=&gt;&quot;2020-02-0300:00&quot;,
         &quot;special_from_time&quot;=&gt;&quot;2015-07-3100:00&quot;,
         &quot;package_height&quot;=&gt;&quot;4.00&quot;,
         &quot;special_price&quot;=&gt;9,
         &quot;price&quot;=&gt;32,
         &quot;package_length&quot;=&gt;&quot;10.00&quot;,
         &quot;package_weight&quot;=&gt;&quot;0.04&quot;,
         &quot;Available&quot;=&gt;0,
         &quot;special_to_date&quot;=&gt;&quot;2020-02-03&quot;}],
      &quot;primary_category&quot;=&gt;&quot;10000211&quot;,
      &quot;attributes&quot;=&gt;{&quot;short_description&quot;=&gt;&quot;Short Description&quot;, &quot;name&quot;=&gt;&quot;asd&quot;, &quot;description&quot;=&gt;&quot;Description&quot;, &quot;warranty_type&quot;=&gt;&quot;International Manufacturer&quot;, &quot;brand&quot;=&gt;&quot;Asante&quot;}},
     {&quot;skus&quot;=&gt;
       [{&quot;Status&quot;=&gt;&quot;active&quot;,
         &quot;quantity&quot;=&gt;0,
         &quot;product_weight&quot;=&gt;&quot;0.03&quot;,
         &quot;Image2&quot;=&gt;&quot;http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg&quot;,
         &quot;SellerSku&quot;=&gt;&quot;39817:01:01&quot;,
         &quot;ShopSku&quot;=&gt;&quot;BU565ELAX8AGSGAMZ-1104491&quot;,
         &quot;Url&quot;=&gt;&quot;https://alice.lazada.sg/asd-1083832.html&quot;,
         &quot;package_width&quot;=&gt;&quot;10.00&quot;,
         &quot;special_to_time&quot;=&gt;&quot;2020-02-0300:00&quot;,
         &quot;special_from_time&quot;=&gt;&quot;2015-07-3100:00&quot;,
         &quot;package_height&quot;=&gt;&quot;4.00&quot;,
         &quot;special_price&quot;=&gt;9,
         &quot;price&quot;=&gt;32,
         &quot;package_length&quot;=&gt;&quot;10.00&quot;,
         &quot;package_weight&quot;=&gt;&quot;0.04&quot;,
         &quot;Available&quot;=&gt;0,
         &quot;special_to_date&quot;=&gt;&quot;2020-02-03&quot;}],
      &quot;primary_category&quot;=&gt;&quot;10000211&quot;,
      &quot;attributes&quot;=&gt;{&quot;short_description&quot;=&gt;&quot;Short description&quot;, &quot;name&quot;=&gt;&quot;asd&quot;, &quot;description&quot;=&gt;&quot;Description&quot;, &quot;warranty_type&quot;=&gt;&quot;International Manufacturer&quot;, &quot;brand&quot;=&gt;&quot;Asante&quot;}}]},
 &quot;request_id&quot;=&gt;&quot;0ba2887315178178017221014&quot;}
</code></pre>
<p>It's totally fine if you want the hash keys to remain as camelcase, but if you want to convert the keys to snake case instead, Rails provides a helper to transform your hash keys to underscore:</p>
<pre><code class="language-ruby">&gt; response.deep_transform_keys { |key| key.to_s.underscore }
=&gt; {&quot;code&quot;=&gt;&quot;0&quot;,
 &quot;data&quot;=&gt;
  {&quot;total_products&quot;=&gt;&quot;10&quot;,
   &quot;products&quot;=&gt;
    [{&quot;skus&quot;=&gt;
       [{&quot;status&quot;=&gt;&quot;active&quot;,
         &quot;quantity&quot;=&gt;0,
         &quot;product_weight&quot;=&gt;&quot;0.03&quot;,
         &quot;image2&quot;=&gt;&quot;http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg&quot;,
         &quot;seller_sku&quot;=&gt;&quot;39817:01:01&quot;,
         &quot;shop_sku&quot;=&gt;&quot;BU565ELAX8AGSGAMZ-1104491&quot;,
         &quot;url&quot;=&gt;&quot;https://alice.lazada.sg/asd-1083832.html&quot;,
         &quot;package_width&quot;=&gt;&quot;10.00&quot;,
         &quot;special_to_time&quot;=&gt;&quot;2020-02-0300:00&quot;,
         &quot;special_from_time&quot;=&gt;&quot;2015-07-3100:00&quot;,
         &quot;package_height&quot;=&gt;&quot;4.00&quot;,
         &quot;special_price&quot;=&gt;9,
         &quot;price&quot;=&gt;32,
         &quot;package_length&quot;=&gt;&quot;10.00&quot;,
         &quot;package_weight&quot;=&gt;&quot;0.04&quot;,
         &quot;available&quot;=&gt;0,
         &quot;special_to_date&quot;=&gt;&quot;2020-02-03&quot;}],
      &quot;primary_category&quot;=&gt;&quot;10000211&quot;,
      &quot;attributes&quot;=&gt;{&quot;short_description&quot;=&gt;&quot;Short Description&quot;, &quot;name&quot;=&gt;&quot;asd&quot;, &quot;description&quot;=&gt;&quot;Description&quot;, &quot;warranty_type&quot;=&gt;&quot;International Manufacturer&quot;, &quot;brand&quot;=&gt;&quot;Asante&quot;}},
     {&quot;skus&quot;=&gt;
       [{&quot;status&quot;=&gt;&quot;active&quot;,
         &quot;quantity&quot;=&gt;0,
         &quot;product_weight&quot;=&gt;&quot;0.03&quot;,
         &quot;image2&quot;=&gt;&quot;http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg&quot;,
         &quot;seller_sku&quot;=&gt;&quot;39817:01:01&quot;,
         &quot;shop_sku&quot;=&gt;&quot;BU565ELAX8AGSGAMZ-1104491&quot;,
         &quot;url&quot;=&gt;&quot;https://alice.lazada.sg/asd-1083832.html&quot;,
         &quot;package_width&quot;=&gt;&quot;10.00&quot;,
         &quot;special_to_time&quot;=&gt;&quot;2020-02-0300:00&quot;,
         &quot;special_from_time&quot;=&gt;&quot;2015-07-3100:00&quot;,
         &quot;package_height&quot;=&gt;&quot;4.00&quot;,
         &quot;special_price&quot;=&gt;9,
         &quot;price&quot;=&gt;32,
         &quot;package_length&quot;=&gt;&quot;10.00&quot;,
         &quot;package_weight&quot;=&gt;&quot;0.04&quot;,
         &quot;available&quot;=&gt;0,
         &quot;special_to_date&quot;=&gt;&quot;2020-02-03&quot;}],
      &quot;primary_category&quot;=&gt;&quot;10000211&quot;,
      &quot;attributes&quot;=&gt;{&quot;short_description&quot;=&gt;&quot;Short description&quot;, &quot;name&quot;=&gt;&quot;asd&quot;, &quot;description&quot;=&gt;&quot;Description&quot;, &quot;warranty_type&quot;=&gt;&quot;International Manufacturer&quot;, &quot;brand&quot;=&gt;&quot;Asante&quot;}}]},
 &quot;request_id&quot;=&gt;&quot;0ba2887315178178017221014&quot;}
</code></pre>
<p>These snippets comes in handy while dealing with external APIs which the response returned is not under control. While using hash or keys with camel case won't cause any problem, but it might somehow hurt the readability of the code when hash is frequently being used while processing the response, which happened in one of our project. Converting the hash to object is recommended unless memory and performance tweaking is in priority.</p>
<h2 id="externalreading">External reading</h2>
<ol>
<li><a href="https://coderwall.com/p/74rajw/convert-a-complex-nested-hash-to-an-object">https://coderwall.com/p/74rajw/convert-a-complex-nested-hash-to-an-object</a></li>
<li><a href="https://stackoverflow.com/questions/8706930/converting-nested-hash-keys-from-camelcase-to-snake-case-in-ruby/40093995?noredirect=1#comment72573345_40093995">https://stackoverflow.com/questions/8706930/converting-nested-hash-keys-from-camelcase-to-snake-case-in-ruby/40093995?noredirect=1#comment72573345_40093995</a></li>
</ol>
]]></content:encoded></item><item><title><![CDATA[The Art of Finding a Lost Ruby Gem]]></title><description><![CDATA[This post shares how a forked gem was found in a place that has replicated the fork, which was removed some while ago from the remote source, Github.]]></description><link>http://waiyanyoon.com/the-art-of-finding-a-lost-rubygem/</link><guid isPermaLink="false">Ghost__Post__5ae3138ebd54885f9208928f</guid><category><![CDATA[rails]]></category><category><![CDATA[rubygem]]></category><category><![CDATA[ruby]]></category><dc:creator><![CDATA[Yoon Wai Yan]]></dc:creator><pubDate>Fri, 27 Apr 2018 13:30:42 GMT</pubDate><content:encoded><![CDATA[<h2 id="context">Context</h2>
<p>A project was remained almost untouched for a year and it was out of dust recently for migrating a deprecating API. For frontend project using React on Ruby on Rails, things are moving fast enough that <a href="https://github.com/reactjs/react-rails">react-rails</a> is no longer needed and <a href="https://github.com/rails/webpacker">webpacker</a> is officially introduced to use ES6 and npm libraries for the frontend pages, all this within a year. A <a href="https://github.com/adazzle/react-data-grid">react-data-grid</a> npm library was found and jquery is no more needed to make things work in jquery <a href="https://github.com/wenzhixin/bootstrap-table">bootstrap-table</a> is no longer needed in a React ecosystem.</p>
<p>Other than that, this project was using a fork of a Rails assets gem which contains the minified library of <code>react-bootstrap</code> npm library, which was removed from Github, and the <a href="https://github.com/mariopeixoto/react-bootstrap-rails">original repo</a> remains unmantained.</p>
<h2 id="problem">Problem</h2>
<p>We were forced to use the original repo of the gem but unfortunately there are <code>inputRef</code> errors in React Bootstrap which was hard to trace down. I asked the fork owner to recall what was changed to make it work, but we couldn't trace down what was changed in the fork.</p>
<h2 id="solution">Solution</h2>
<p>One great hint to the solution of the problem is that the project works on production, so I guess the repo is somewhere inside our production server. Right after this idea popped out my mind, I did a quick tour on the production server root and pry open the gem:</p>
<pre><code class="language-bash">$ EDITOR=vim bundle open react-bootstrap-rails
</code></pre>
<pre><code class="language-vim">&quot; ============================================================================
&quot; Netrw Directory Listing                                        (netrw v155)
&quot;   /var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d
&quot;   Sorted by      name
&quot;   Sort sequence: [\/]$,\&lt;core\%(\.\d\+\)\=\&gt;,\.h$,\.c$,\.cpp$,\~\=\*$,*,\.o$,\.obj$,\.
&quot;   Quick Help: &lt;F1&gt;:help  -:go up dir  D:delete  R:rename  s:sort-by  x:special
&quot; ==============================================================================
../
...
</code></pre>
<p>The directory of the gem shows up like a puzzle game. Changed my current working directory to the gem directory:</p>
<pre><code class="language-bash">$ cd /var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d
</code></pre>
<p>then checked the git log to trace the latest change.</p>
<pre><code class="language-bash">$ git log
</code></pre>
<p>Bingo! This is the lost gem we're trying to find:</p>
<pre><code>commit 025316434534db0514edf527f336ad8e8474437c1
Author: The Fork Author &lt;author@email.com&gt;
Date:   Fri Jan 6 16:20:46 2017 +0800

    bump version to 0.30.7

commit 3870d765ed93d40537353216de3e36332223247b
Author: Mario Peixoto &lt;mario.peixoto@gmail.com&gt;
Date:   Thu Dec 29 15:57:40 2016 -0600

    Adding warning to README

</code></pre>
<p>So I quickly copied the gem to my local:</p>
<pre><code>scp -r user@my.server.ip.address:/var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d ~/Desktop/
</code></pre>
<p>and source it in my project's Gemfile:</p>
<pre><code class="language-ruby">gem 'react-bootstrap-rails', path: '~/Desktop/react-bootstrap-rails-025316434534d'
</code></pre>
<p>now my local clone has finally worked! Later that I pushed the gem into a repo under the company's ownership so that we could still use it internally without being dependent to external source.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The steps looks simple and trivial, but the whole process of seeking out the truth of broken frontend that's hard to trace and the lost of art of the fork feels like a puzzle game for me solve. Certain level of fun is engaged which helps with the boredom of daily coding.</p>
<p>Note: As you might have noticed, the exact path, project, and the information of the fork author are all modified and changed to preserve privacy.</p>
]]></content:encoded></item><item><title><![CDATA[Use of React.Fragment]]></title><description><![CDATA[Use React Fragment to wrap adjacent components instead of `div`.]]></description><link>http://waiyanyoon.com/react-fragment/</link><guid isPermaLink="false">Ghost__Post__5ae1cd81bd54885f92089288</guid><category><![CDATA[React]]></category><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Yoon Wai Yan]]></dc:creator><pubDate>Thu, 26 Apr 2018 13:30:21 GMT</pubDate><content:encoded><![CDATA[<p>React developers know what does it mean when they saw this error:</p>
<blockquote>
<p>Adjacent JSX elements must be wrapped in an enclosing tag</p>
</blockquote>
<p>It's simply fixed by adding <code>&lt;div&gt;</code> tags between the element. At least it used to be, until I saw <code>React.Fragment</code> in a blog and read the new official documentation of React. It's as simple as replacing <code>&lt;div&gt;</code> tag with <code>React.Fragment</code>:</p>
<pre><code class="language-javacript">import React, { Fragment } from 'react';

const MyFragment = () =&gt; (
    return (
        &lt;Fragment&gt;
            &lt;div&gt;First div&lt;/div&gt;
            &lt;div&gt;Second div&lt;/div&gt;
        &lt;/Fragment&gt;
    )
);

export default MyFragment;
</code></pre>
<p>The use of <code>&lt;Fragment&gt;</code> will not render extra <code>&lt;div&gt;</code> tag, which is a good news in certain case of styling.</p>
]]></content:encoded></item><item><title><![CDATA[Deploying Rails 5.2 Applications with New Encrypted Credentials using Capistrano]]></title><description><![CDATA[Rails 5.2 way of managing the credentials are different from previous Rails versions. This post talks about the error that may occur during the first time deployment of your Rails 5.2 app to your server using Capistrano.]]></description><link>http://waiyanyoon.com/deploying-rails-5-2-applications-with-encrypted-credentials-using-capistrano/</link><guid isPermaLink="false">Ghost__Post__5ae08747bd54885f92089279</guid><category><![CDATA[rails]]></category><category><![CDATA[capistrano]]></category><category><![CDATA[deployment]]></category><category><![CDATA[security]]></category><dc:creator><![CDATA[Yoon Wai Yan]]></dc:creator><pubDate>Wed, 25 Apr 2018 14:47:44 GMT</pubDate><content:encoded><![CDATA[<h2 id="context">Context</h2>
<p>Rails 5.2 has been released with dozens of new features, which highlights the release of ActiveStorage and a new way to deal with encrypted credentials within the codebase. This post highlights how encrypted credentials has changed the way secret keys are managed in Rails applications and how it affects the deployment process.</p>
<p>Let's see what's the key difference of the credentials management between Rails 5.2 and previous versions:</p>
<h3 id="beforerails52">Before Rails 5.2</h3>
<ul>
<li><code>secret_key_base</code> was located in <code>config/secrets.yml</code></li>
<li>Every credentials have to be configured in environment variables to keep the credentials secure.</li>
<li>The environment variables are all being called in <code>config/secrets.yml</code></li>
</ul>
<h3 id="changesintroducedsincerails52">Changes Introduced Since Rails 5.2</h3>
<ul>
<li>The credentials are <strong>encrypted in local</strong> with the use of <code>config/master.key</code>. <code>config/master.key</code> will be ignored in git by default.</li>
<li>The encrypted credentials commited to repo is the encrypted version of credentials: <code>config/credentials.yml.enc</code></li>
<li>We use the command <code>$ rails credentials:edit</code>(or <code>$ EDITOR=vim rails credentials:edit</code> if <code>EDITOR</code> is not configured) to edit the credentils.</li>
</ul>
<h2 id="deploymentissuerelatedtoencryptedcredentials">Deployment Issue Related to Encrypted Credentials</h2>
<p>Problem comes in when <code>config/master.key</code> is not commited in the repo. When <code>config/master.key</code> is not found in the production server, the Rails app in the server couldn't decrypt the credentials thus the credentials couldn't be used.</p>
<p>We failed to deploy to production due to this error:</p>
<pre><code class="language-bash">ArgumentError: Missing `secret_key_base` for 'production' environment, set this string with `rails credentials:edit`
</code></pre>
<h2 id="solution">Solution</h2>
<p>There are two ways to put the master key to production server:</p>
<ol>
<li>Use of environment keys (<code>ENV[RAILS_MASTER_KEY]</code>)</li>
<li>Copy <code>config/master.key</code> to your server manually without commiting to git</li>
</ol>
<p>Solution #1 didn't work out well for capistrano in our case, thus we have used solution #2 for this app. Copying the file to production server that's being managed by capistrano means I have to configure something so that I don't copy the same key to server everytime we deploy the application. These are the steps to deploy the application successfully for the first time:</p>
<ol>
<li>Copy <code>config/master.key</code> from local filesystem to the production server under <code>&lt;project_root&gt;/shared/config/master.key</code>.</li>
<li>Configure capistrano's <code>config/deploy.rb</code> to include this line:<pre><code class="language-ruby">  set :linked_files, %w{config/master.key}
</code></pre>
By doing this you're telling Capistrano to symlink <code>config/master.key</code> to <code>&lt;project_root&gt;/shared/config/master.key</code> which contains the master key you've just copied to the server.</li>
<li>Deploy app again and verify that deployment is successful.</li>
<li>Commit this confguration changes. Don't check-in <code>config/master.key</code>!</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>This way of how credentials are managed might seem complicated at first glance, but thinking of how they are being managed locally without exposing it in the git repo, the way of copying master key to production and sharing master key to your colleagues seems to be easier compared to setting up environment variables remotely and informing the tech team when there's any change on the credentials. It helps to secure the credentials by not exposing the credentials explicitly to each member of your team too.</p>
<h2 id="referencesexternallinks">References / External Links</h2>
<ol>
<li><a href="https://keithpblog.org/post/encrypted-secrets/">https://keithpblog.org/post/encrypted-secrets/</a></li>
<li><a href="https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2">https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2</a></li>
</ol>
]]></content:encoded></item><item><title><![CDATA[Still Using Rake for Commands in Your Rails 5 Projects?]]></title><description><![CDATA[`rake` commands often cause problems due to different bundler versions. This newer alternate has improved the dev workflow without using `bundle exec`.]]></description><link>http://waiyanyoon.com/still-using-rake-for-commands-in-your-rails-5-projects/</link><guid isPermaLink="false">Ghost__Post__5ae07cf41e31635d585d655a</guid><category><![CDATA[rails]]></category><dc:creator><![CDATA[Yoon Wai Yan]]></dc:creator><pubDate>Mon, 09 Apr 2018 09:01:00 GMT</pubDate><content:encoded><![CDATA[<p>While it's programmed in my brain to use <code>rake</code> commands for migrations and tasks, I find it very useful to use <code>rails</code> command instead of <code>rake</code> which is introduced since Rails 5 to unify the use of rails commands. Using <code>rake</code> commands in Rails projects normally cause errors because of the bundler version:</p>
<pre><code class="language-shell">$ rake jobs:workoff
rake aborted!
Gem::LoadError: You have already activated rake 12.3.1, but your Gemfile requires rake 12.3.0. Prepending `bundle exec` to your command may solve this.
/Users/waiyanyoon/Documents/workspace/project/config/boot.rb:3:in `&lt;top (required)&gt;'
/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `require_relative'
/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `&lt;top (required)&gt;'
/Users/waiyanyoon/Documents/workspace/project/Rakefile:4:in `&lt;top (required)&gt;'

Caused by:
LoadError: cannot load such file -- bundler/setup
/Users/waiyanyoon/Documents/workspace/project/config/boot.rb:3:in `&lt;top (required)&gt;'
/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `require_relative'
/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `&lt;top (required)&gt;'
/Users/waiyanyoon/Documents/workspace/project/Rakefile:4:in `&lt;top (required)&gt;'
(See full trace by running task with --trace)
</code></pre>
<p>So now I replaced my <code>rake</code> commands to use <code>rails</code> instead for all my commands:</p>
<pre><code class="language-shell">$ rails jobs:workoff
</code></pre>
<p>Now I can easily prevent the error above.</p>
]]></content:encoded></item><item><title><![CDATA[Replacing Content Displayed in Active Admin Blank Slate]]></title><description><![CDATA[A small tip on rendering blank slate without new resource action link in Active Admin pages.]]></description><link>http://waiyanyoon.com/replacing-content-displayed-in-active-admin-blank-slate/</link><guid isPermaLink="false">Ghost__Post__5ae07c381e31635d585d6554</guid><category><![CDATA[rails]]></category><category><![CDATA[active-admin]]></category><dc:creator><![CDATA[Yoon Wai Yan]]></dc:creator><pubDate>Fri, 31 Jul 2015 14:17:00 GMT</pubDate><content:encoded><![CDATA[<p>There are tons of Active Admin workarounds available in the net but there are very limited resource on manipulating the content to be displayed in the blank slate. One of it is the StackOverflow question which is not what I want. All I want is to replace/manipulate the content as displayed inside the blank slate instead of customizing it in per-page basis: Remove the &quot;Create new&quot; link.<br>
<img src="https://s3.amazonaws.com/waiyanyoon.com/blank_slate_before.png" alt="Before monkey patching"/></br></p>
<p>There's a question that was asked in Google Groups but it's been few years but yet received any response, so I decided to create a monkey patch by overriding Active Admin source code. The code is placed in the /config/initializer folder of my Rails project as <code>blank_slate.rb</code> so that the project loads up the patch file without any configuration to load up a lib folder.</p>
<script src="https://gist.github.com/yoonwaiyan/75caf90aa5c355eb3484.js"/>
<p>By patching the <code>render_blank_slate</code> function and removing the join between the blank slate message and the &quot;Create One&quot; link as returned in <code>blank_slate_link</code>.<br>
<img src="https://s3.amazonaws.com/waiyanyoon.com/blank_slate_after.png" alt="After monkey patching"/></br></p>
]]></content:encoded></item></channel></rss>