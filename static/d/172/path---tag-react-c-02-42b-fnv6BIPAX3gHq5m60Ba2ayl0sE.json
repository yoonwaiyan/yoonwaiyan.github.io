{"data":{"ghostTag":{"slug":"react","name":"React","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5b1a743fbd54885f920892ab","title":"Understanding Basics of React Context","slug":"understanding-basics-of-react-context","featured":false,"feature_image":null,"excerpt":"Use React Context to reduce delegation of properties across a component tree.","custom_excerpt":"Use React Context to reduce delegation of properties across a component tree.","created_at_pretty":"08 June, 2018","published_at_pretty":"08 June, 2018","updated_at_pretty":"08 June, 2018","created_at":"2018-06-08T20:19:11.000+08:00","published_at":"2018-06-08T21:40:25.000+08:00","updated_at":"2018-06-08T21:48:20.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"JavaScript","slug":"javascript","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"The use of React Context with renderProps that's introduced since React v16.3 is\nhighly being recommended in React community to pass global level variables to\nchild components, especially when the passing of the props from parent component\nto deep levels of child components, for example:\n\nThe code snippet before using React Context:\n\nimport React from 'react';\n// ...\n\nconst LoggedInUser = ({ user: { name } }) => (\n  <Fragment>\n    <span>Logged in as {name}</span>\n  </Fragment>\n);\n\nconst Navbar = ({ menu, user }) => (\n  <div>\n    <NavigationMenu menus={menu} />\n    <LoggedInUser user={user} />\n  </div>\n);\n\nclass Dashboard extends PureComponent {\n  render() {\n    const menu = [\n      { name: 'Home', url: '/' },\n      { name: 'Preferences', url: '/preferences' }\n    ];\n\n    // user is available at higher level of component\n    const { user, posts } = this.props;\n\n    return (\n      <Fragment>\n        <Navbar menu={menu} user={user} />\n        {posts.map(post => <BlogPost post={post} />)}\n      </Fragment>\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    user: {}\n  };\n\n  componentDidMount() {\n    fetchUser().then(user => {\n      this.setState({ user });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div>\n        <Route url=\"/\" render={() => <Dashboard user={user} />} />\n      </div>\n    );\n  }\n}\n\n\n\nYou'll notice the use of user  is delegated from Dashboard  component down to \nLoggedInUser  without being used by the components along the delegation. It\nincreases complexity when the prop is delegated in a handful of levels down\nespecially when there are multiple props being passed down, which is the case of\nthe React codebase of my company project.\n\nNow we're going to replace the props delegation with React.Context. We first\ncreate an Auth React Context:\n\nimport React, { createContext } from 'react';\n\nconst AuthContext = createContext({ isLoggedIn: false, user: {} });\n\nexport default AuthContext;\n\n\ncreateContext()  will create two sub-components: Provider  and Consumer. \nConsumer  provides render props of an object that contains isLoggedIn  and user \nproperties. Now we 'll consume the user object in Navbar  and remove the props\nfrom Dashboard:\n\nimport React from 'react';\nimport AuthContext from './AuthContext';\n\n// ...\n\n// use AuthContext.Consumer to obtain user object\nconst Navbar = ({ menu, user }) => (\n  <div>\n    <NavigationMenu menus={menu} />\n    <AuthContext.Consumer>\n      {({ isAuth, user }) => <LoggedInUser user={user} />}\n    </AuthContext.Consumer>\n  </div>\n);\n\nclass Dashboard extends Component {\n  render() {\n    const menu = [\n      { name: 'Home', url: '/' },\n      { name: 'Preferences', url: '/preferences' }\n    ];\n\n    const { posts } = this.props;\n\n    // now we removed user from the list of props\n    return (\n      <Fragment>\n        <Navbar menu={menu} />\n        {posts.map(post => <BlogPost post={post} />)}\n      </Fragment>\n    );\n  }\n}\n\n// ...\n\n\nBy using AuthContext.Consumer, we're able to access the user  object directly\nwithout passing it from Dashboard  component, but when we try to log user to the\nconsole, it appears that user is an empty object. This is because the default\nvalue provided by AuthContext  is an empty user. Now we'll set the value of user\nusing AuthContext.Provider:\n\n// ...\n\nclass App extends Component {\n  state = {\n    user: {},\n    isLoggedIn: false\n  };\n\n  componentDidMount() {\n    fetchUser().then(user => {\n      this.setState({ user, isLoggedIn: true });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div>\n        <AuthContext.Provider value={{ user, isLoggedIn }}>\n          <Route url=\"/\" component={Dashboard} />\n        </AuthContext.Provider>\n      </div>\n    );\n  }\n}\n\n// ...\n\n\nNow we have the user information available in the Consumer!\n\n\n--------------------------------------------------------------------------------\n\nReact Context is especially useful for:\n\n 1. User authentication and routes management\n 2. Locale and translations management\n 3. Theme or display settings\n 4. Modal management\n 5. State management (instead of Redux)\n\nThe use of each example above is available in the external links provided below.\nCurrently React Context is only used for ActionCable web socket configuration in\nour project as we've just upgraded the React version to version 16.3.2. There is\na good chance of using it for other purposes within the project to clean up the\ndeep delegation of certain properties.\n\nExternal links:\n 1. https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a\n 2. https://codeburst.io/what-can-react-context-api-do-for-you-multi-language-text-modals-and-theme-switchers-9cfbc8e5ee5e\n 3. https://reactjs.org/docs/context.html","html":"<p>The use of React Context with renderProps that's introduced since React v16.3 is highly being recommended in React community to pass global level variables to child components, especially when the passing of the props from parent component to deep levels of child components, for example:</p>\n<p>The code snippet before using React Context:</p>\n<pre><code class=\"language-javascript\">import React from 'react';\n// ...\n\nconst LoggedInUser = ({ user: { name } }) =&gt; (\n  &lt;Fragment&gt;\n    &lt;span&gt;Logged in as {name}&lt;/span&gt;\n  &lt;/Fragment&gt;\n);\n\nconst Navbar = ({ menu, user }) =&gt; (\n  &lt;div&gt;\n    &lt;NavigationMenu menus={menu} /&gt;\n    &lt;LoggedInUser user={user} /&gt;\n  &lt;/div&gt;\n);\n\nclass Dashboard extends PureComponent {\n  render() {\n    const menu = [\n      { name: 'Home', url: '/' },\n      { name: 'Preferences', url: '/preferences' }\n    ];\n\n    // user is available at higher level of component\n    const { user, posts } = this.props;\n\n    return (\n      &lt;Fragment&gt;\n        &lt;Navbar menu={menu} user={user} /&gt;\n        {posts.map(post =&gt; &lt;BlogPost post={post} /&gt;)}\n      &lt;/Fragment&gt;\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    user: {}\n  };\n\n  componentDidMount() {\n    fetchUser().then(user =&gt; {\n      this.setState({ user });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      &lt;div&gt;\n        &lt;Route url=&quot;/&quot; render={() =&gt; &lt;Dashboard user={user} /&gt;} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n</code></pre>\n<p>You'll notice the use of <code>user</code> is delegated from <code>Dashboard</code> component down to <code>LoggedInUser</code> without being used by the components along the delegation. It increases complexity when the prop is delegated in a handful of levels down especially when there are multiple props being passed down, which is the case of the React codebase of my company project.</p>\n<p>Now we're going to replace the props delegation with React.Context. We first create an Auth React Context:</p>\n<pre><code class=\"language-javascript\">import React, { createContext } from 'react';\n\nconst AuthContext = createContext({ isLoggedIn: false, user: {} });\n\nexport default AuthContext;\n</code></pre>\n<p><code>createContext()</code> will create two sub-components: <code>Provider</code> and <code>Consumer</code>. <code>Consumer</code> provides render props of an object that contains <code>isLoggedIn</code> and <code>user</code> properties. Now we 'll consume the user object in <code>Navbar</code> and remove the props from <code>Dashboard</code>:</p>\n<pre><code class=\"language-javascript\">import React from 'react';\nimport AuthContext from './AuthContext';\n\n// ...\n\n// use AuthContext.Consumer to obtain user object\nconst Navbar = ({ menu, user }) =&gt; (\n  &lt;div&gt;\n    &lt;NavigationMenu menus={menu} /&gt;\n    &lt;AuthContext.Consumer&gt;\n      {({ isAuth, user }) =&gt; &lt;LoggedInUser user={user} /&gt;}\n    &lt;/AuthContext.Consumer&gt;\n  &lt;/div&gt;\n);\n\nclass Dashboard extends Component {\n  render() {\n    const menu = [\n      { name: 'Home', url: '/' },\n      { name: 'Preferences', url: '/preferences' }\n    ];\n\n    const { posts } = this.props;\n\n    // now we removed user from the list of props\n    return (\n      &lt;Fragment&gt;\n        &lt;Navbar menu={menu} /&gt;\n        {posts.map(post =&gt; &lt;BlogPost post={post} /&gt;)}\n      &lt;/Fragment&gt;\n    );\n  }\n}\n\n// ...\n</code></pre>\n<p>By using <code>AuthContext.Consumer</code>, we're able to access the <code>user</code> object directly without passing it from <code>Dashboard</code> component, but when we try to log user to the console, it appears that user is an empty object. This is because the default value provided by <code>AuthContext</code> is an empty user. Now we'll set the value of user using <code>AuthContext.Provider</code>:</p>\n<pre><code class=\"language-javascript\">// ...\n\nclass App extends Component {\n  state = {\n    user: {},\n    isLoggedIn: false\n  };\n\n  componentDidMount() {\n    fetchUser().then(user =&gt; {\n      this.setState({ user, isLoggedIn: true });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      &lt;div&gt;\n        &lt;AuthContext.Provider value={{ user, isLoggedIn }}&gt;\n          &lt;Route url=&quot;/&quot; component={Dashboard} /&gt;\n        &lt;/AuthContext.Provider&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n// ...\n</code></pre>\n<p>Now we have the user information available in the Consumer!</p>\n<hr>\n<p>React Context is especially useful for:</p>\n<ol>\n<li>User authentication and routes management</li>\n<li>Locale and translations management</li>\n<li>Theme or display settings</li>\n<li>Modal management</li>\n<li>State management (instead of Redux)</li>\n</ol>\n<p>The use of each example above is available in the external links provided below. Currently React Context is only used for ActionCable web socket configuration in our project as we've just upgraded the React version to version 16.3.2. There is a good chance of using it for other purposes within the project to clean up the deep delegation of certain properties.</p>\n<h3 id=\"externallinks\">External links:</h3>\n<ol>\n<li><a href=\"https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a\">https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a</a></li>\n<li><a href=\"https://codeburst.io/what-can-react-context-api-do-for-you-multi-language-text-modals-and-theme-switchers-9cfbc8e5ee5e\">https://codeburst.io/what-can-react-context-api-do-for-you-multi-language-text-modals-and-theme-switchers-9cfbc8e5ee5e</a></li>\n<li><a href=\"https://reactjs.org/docs/context.html\">https://reactjs.org/docs/context.html</a></li>\n</ol>\n","url":"http://waiyanyoon.com/understanding-basics-of-react-context/","uuid":"a041e3fb-f428-402b-8537-37d36417b9b5","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b1a743fbd54885f920892ab"}},{"node":{"id":"Ghost__Post__5ae1cd81bd54885f92089288","title":"Use of React.Fragment","slug":"react-fragment","featured":false,"feature_image":null,"excerpt":"Use React Fragment to wrap adjacent components instead of `div`.","custom_excerpt":"Use React Fragment to wrap adjacent components instead of `div`.","created_at_pretty":"26 April, 2018","published_at_pretty":"26 April, 2018","updated_at_pretty":"27 April, 2018","created_at":"2018-04-26T21:00:49.000+08:00","published_at":"2018-04-26T21:30:21.000+08:00","updated_at":"2018-04-27T09:37:37.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"JavaScript","slug":"javascript","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"React developers know what does it mean when they saw this error:\n\nAdjacent JSX elements must be wrapped in an enclosing tag\n\nIt's simply fixed by adding <div>  tags between the element. At least it used to\nbe, until I saw React.Fragment  in a blog and read the new official\ndocumentation of React. It's as simple as replacing <div>  tag with \nReact.Fragment:\n\nimport React, { Fragment } from 'react';\n\nconst MyFragment = () => (\n    return (\n        <Fragment>\n            <div>First div</div>\n            <div>Second div</div>\n        </Fragment>\n    )\n);\n\nexport default MyFragment;\n\n\nThe use of <Fragment>  will not render extra <div>  tag, which is a good news in\ncertain case of styling.","html":"<p>React developers know what does it mean when they saw this error:</p>\n<blockquote>\n<p>Adjacent JSX elements must be wrapped in an enclosing tag</p>\n</blockquote>\n<p>It's simply fixed by adding <code>&lt;div&gt;</code> tags between the element. At least it used to be, until I saw <code>React.Fragment</code> in a blog and read the new official documentation of React. It's as simple as replacing <code>&lt;div&gt;</code> tag with <code>React.Fragment</code>:</p>\n<pre><code class=\"language-javacript\">import React, { Fragment } from 'react';\n\nconst MyFragment = () =&gt; (\n    return (\n        &lt;Fragment&gt;\n            &lt;div&gt;First div&lt;/div&gt;\n            &lt;div&gt;Second div&lt;/div&gt;\n        &lt;/Fragment&gt;\n    )\n);\n\nexport default MyFragment;\n</code></pre>\n<p>The use of <code>&lt;Fragment&gt;</code> will not render extra <code>&lt;div&gt;</code> tag, which is a good news in certain case of styling.</p>\n","url":"http://waiyanyoon.com/react-fragment/","uuid":"488e128f-b71f-4c93-af5f-a8cfd39277b5","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae1cd81bd54885f92089288"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"react","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}