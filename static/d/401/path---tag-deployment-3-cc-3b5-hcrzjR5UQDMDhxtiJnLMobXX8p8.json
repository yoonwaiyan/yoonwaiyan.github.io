{"data":{"ghostTag":{"slug":"deployment","name":"deployment","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5ae08747bd54885f92089279","title":"Deploying Rails 5.2 Applications with New Encrypted Credentials using Capistrano","slug":"deploying-rails-5-2-applications-with-encrypted-credentials-using-capistrano","featured":false,"feature_image":null,"excerpt":"Rails 5.2 way of managing the credentials are different from previous Rails versions. This post talks about the error that may occur during the first time deployment of your Rails 5.2 app to your server using Capistrano.","custom_excerpt":"Rails 5.2 way of managing the credentials are different from previous Rails versions. This post talks about the error that may occur during the first time deployment of your Rails 5.2 app to your server using Capistrano.","created_at_pretty":"25 April, 2018","published_at_pretty":"25 April, 2018","updated_at_pretty":"15 April, 2019","created_at":"2018-04-25T21:48:55.000+08:00","published_at":"2018-04-25T22:47:44.000+08:00","updated_at":"2019-04-15T13:54:55.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"capistrano","slug":"capistrano","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"deployment","slug":"deployment","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"security","slug":"security","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Context\nRails 5.2 has been released with dozens of new features, which highlights the\nrelease of ActiveStorage and a new way to deal with encrypted credentials within\nthe codebase. This post highlights how encrypted credentials has changed the way\nsecret keys are managed in Rails applications and how it affects the deployment\nprocess.\n\nLet's see what's the key difference of the credentials management between Rails\n5.2 and previous versions:\n\nBefore Rails 5.2\n * secret_key_base  was located in config/secrets.yml\n * Every credentials have to be configured in environment variables to keep the\n   credentials secure.\n * The environment variables are all being called in config/secrets.yml\n\nChanges Introduced Since Rails 5.2\n * The credentials are encrypted in local  with the use of config/master.key. \n   config/master.key  will be ignored in git by default.\n * The encrypted credentials commited to repo is the encrypted version of\n   credentials: config/credentials.yml.enc\n * We use the command $ rails credentials:edit(or $ EDITOR=vim rails\n   credentials:edit  if EDITOR  is not configured) to edit the credentils.\n\nDeployment Issue Related to Encrypted Credentials\nProblem comes in when config/master.key  is not commited in the repo. When \nconfig/master.key  is not found in the production server, the Rails app in the\nserver couldn't decrypt the credentials thus the credentials couldn't be used.\n\nWe failed to deploy to production due to this error:\n\nArgumentError: Missing `secret_key_base` for 'production' environment, set this string with `rails credentials:edit`\n\n\nSolution\nThere are two ways to put the master key to production server:\n\n 1. Use of environment keys (ENV[RAILS_MASTER_KEY])\n 2. Copy config/master.key  to your server manually without commiting to git\n\nSolution #1 didn't work out well for capistrano in our case, thus we have used\nsolution #2 for this app. Copying the file to production server that's being\nmanaged by capistrano means I have to configure something so that I don't copy\nthe same key to server everytime we deploy the application. These are the steps\nto deploy the application successfully for the first time:\n\n 1. Copy config/master.key  from local filesystem to the production server under\n     <project_root>/shared/config/master.key.\n 2. Configure capistrano's config/deploy.rb  to include this line:  set :linked_files, %w{config/master.key}\n    \n    \n    By doing this you're telling Capistrano to symlink config/master.key  to \n    <project_root>/shared/config/master.key  which contains the master key\n    you've just copied to the server.\n 3. Deploy app again and verify that deployment is successful.\n 4. Commit this confguration changes. Don't check-in config/master.key!\n\nConclusion\nThis way of how credentials are managed might seem complicated at first glance,\nbut thinking of how they are being managed locally without exposing it in the\ngit repo, the way of copying master key to production and sharing master key to\nyour colleagues seems to be easier compared to setting up environment variables\nremotely and informing the tech team when there's any change on the credentials.\nIt helps to secure the credentials by not exposing the credentials explicitly to\neach member of your team too.\n\nReferences / External Links\n 1. https://keithpblog.org/post/encrypted-secrets/\n 2. https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2","html":"<h2 id=\"context\">Context</h2>\n<p>Rails 5.2 has been released with dozens of new features, which highlights the release of ActiveStorage and a new way to deal with encrypted credentials within the codebase. This post highlights how encrypted credentials has changed the way secret keys are managed in Rails applications and how it affects the deployment process.</p>\n<p>Let's see what's the key difference of the credentials management between Rails 5.2 and previous versions:</p>\n<h3 id=\"beforerails52\">Before Rails 5.2</h3>\n<ul>\n<li><code>secret_key_base</code> was located in <code>config/secrets.yml</code></li>\n<li>Every credentials have to be configured in environment variables to keep the credentials secure.</li>\n<li>The environment variables are all being called in <code>config/secrets.yml</code></li>\n</ul>\n<h3 id=\"changesintroducedsincerails52\">Changes Introduced Since Rails 5.2</h3>\n<ul>\n<li>The credentials are <strong>encrypted in local</strong> with the use of <code>config/master.key</code>. <code>config/master.key</code> will be ignored in git by default.</li>\n<li>The encrypted credentials commited to repo is the encrypted version of credentials: <code>config/credentials.yml.enc</code></li>\n<li>We use the command <code>$ rails credentials:edit</code>(or <code>$ EDITOR=vim rails credentials:edit</code> if <code>EDITOR</code> is not configured) to edit the credentils.</li>\n</ul>\n<h2 id=\"deploymentissuerelatedtoencryptedcredentials\">Deployment Issue Related to Encrypted Credentials</h2>\n<p>Problem comes in when <code>config/master.key</code> is not commited in the repo. When <code>config/master.key</code> is not found in the production server, the Rails app in the server couldn't decrypt the credentials thus the credentials couldn't be used.</p>\n<p>We failed to deploy to production due to this error:</p>\n<pre><code class=\"language-bash\">ArgumentError: Missing `secret_key_base` for 'production' environment, set this string with `rails credentials:edit`\n</code></pre>\n<h2 id=\"solution\">Solution</h2>\n<p>There are two ways to put the master key to production server:</p>\n<ol>\n<li>Use of environment keys (<code>ENV[RAILS_MASTER_KEY]</code>)</li>\n<li>Copy <code>config/master.key</code> to your server manually without commiting to git</li>\n</ol>\n<p>Solution #1 didn't work out well for capistrano in our case, thus we have used solution #2 for this app. Copying the file to production server that's being managed by capistrano means I have to configure something so that I don't copy the same key to server everytime we deploy the application. These are the steps to deploy the application successfully for the first time:</p>\n<ol>\n<li>Copy <code>config/master.key</code> from local filesystem to the production server under <code>&lt;project_root&gt;/shared/config/master.key</code>.</li>\n<li>Configure capistrano's <code>config/deploy.rb</code> to include this line:<pre><code class=\"language-ruby\">  set :linked_files, %w{config/master.key}\n</code></pre>\nBy doing this you're telling Capistrano to symlink <code>config/master.key</code> to <code>&lt;project_root&gt;/shared/config/master.key</code> which contains the master key you've just copied to the server.</li>\n<li>Deploy app again and verify that deployment is successful.</li>\n<li>Commit this confguration changes. Don't check-in <code>config/master.key</code>!</li>\n</ol>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This way of how credentials are managed might seem complicated at first glance, but thinking of how they are being managed locally without exposing it in the git repo, the way of copying master key to production and sharing master key to your colleagues seems to be easier compared to setting up environment variables remotely and informing the tech team when there's any change on the credentials. It helps to secure the credentials by not exposing the credentials explicitly to each member of your team too.</p>\n<h2 id=\"referencesexternallinks\">References / External Links</h2>\n<ol>\n<li><a href=\"https://keithpblog.org/post/encrypted-secrets/\">https://keithpblog.org/post/encrypted-secrets/</a></li>\n<li><a href=\"https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2\">https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2</a></li>\n</ol>\n","url":"http://waiyanyoon.com/deploying-rails-5-2-applications-with-encrypted-credentials-using-capistrano/","uuid":"5f4af5c5-f167-4ed0-8eb5-668ef4b34133","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae08747bd54885f92089279"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"deployment","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}