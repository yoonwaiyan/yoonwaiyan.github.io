{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5b6d9c3dbd54885f920892c1","title":"How to Receive Emails in Your Rails Application","slug":"how-to-receive-emails-in-your-rails-application","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":null,"created_at_pretty":"10 August, 2018","published_at_pretty":"10 August, 2018","updated_at_pretty":"10 August, 2018","created_at":"2018-08-10T22:07:57.000+08:00","published_at":"2018-08-10T23:14:59.000+08:00","updated_at":"2018-08-10T23:15:28.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"There are times when a Rails app needs to receive emails to process the content,\nor grab the file from the attachment and process data within the file. In this\ncase griddler gem [https://github.com/thoughtbot/griddler]  would be the best\nbet to parse the incoming emails with its built-in controller action, but it\nseems tricky to follow through the documentations and I have to adapt an\napparent syntax change which caused an issue if I follow the instructions\nblindly. Here is my version of the guide, hope you find it helpful.\n\nThe first step is that you'll need to find an email deliver service provider to\nhelp receive and send your emails. Mailgun and SendGrid would be a good choice\nas they are free to use for small personal projects. After that, follow through\nthe instructions as given by the service so that they could properly receive and\nsend emails.\n\nAfter that, you'll need to setup the service to receive emails and \"forward\" it\nto your app. To test this out, you'll need to expose your local development web\nserver to the public through services such as localtunnel\n[https://localtunnel.github.io/www/]  or ngrok [https://ngrok.com/]. By default\ngriddler gem handles the incoming emails in /email_processor  route, so your\nsetup should include a setting to route your emails through HTTP request to your\nlocal web server, such as \nhttps://test-localtunnel-11.localtunnel.me/email_processor.\n\nNow finally it's time to dive in the code. The code snippets below are based on\nMailgun service that I configured personally, feel free to substitute with other\nadapters available to griddler.\n\nAdd these gems to your Gemfile:\n\ngem 'griddler'\ngem 'griddler-mailgun'\n\n\nAnd configure your griddler to use the adapter of your choice:\n\nGriddler.configure do |config|\n  config.email_service = :mailgun\nend\n\n\nAdd mount_griddler  for the simplest configuration provided by Griddler gem by\ndefault. This handles /email_processor  route that is handled by \nGriddler::EmailsController  controller provided by the gem.\n\nRails.application.routes.draw do\n  # ...\n  mount_griddler\nend\n\n\nAdd new file named app/models/email_processor.rb  with the following code as a\ntemplate. Note that this section is different from other guides as there seems\nto be a new syntax being introduced in the gem, as now an instance of \nEmailProcessor  class will be created before process  instance method is called\n(used to be a class method).\n\nclass EmailProcessor\n  def initialize(email)\n    @email = email\n  end\n\n  def process\n    puts \"received email from #{@email.from}:\"\n    p @email.body\n  end\nend\n\n\nNow you can try send an email to your configured domain and observe your local\nwebserver to make sure everything works fine. Advanced configurations (such as\nhandling the route manually or customize your email processor class) is\navailable at the gem README.\n\nHope this clarifies out the way to receive emails from your Rails app.\n\nExternal Readings:\n\n 1. Receiving Email in Your Rails App With Griddler\n    [https://sendgrid.com/blog/receiving-email-in-your-rails-app-with-griddler/]\n 2. Griddler is Better Than Ever!\n    [https://robots.thoughtbot.com/griddler-is-better-than-ever]\n 3. griddler gem [https://github.com/thoughtbot/griddler]","html":"<p>There are times when a Rails app needs to receive emails to process the content, or grab the file from the attachment and process data within the file. In this case <a href=\"https://github.com/thoughtbot/griddler\">griddler gem</a> would be the best bet to parse the incoming emails with its built-in controller action, but it seems tricky to follow through the documentations and I have to adapt an apparent syntax change which caused an issue if I follow the instructions blindly. Here is my version of the guide, hope you find it helpful.</p>\n<p>The first step is that you'll need to find an email deliver service provider to help receive and send your emails. Mailgun and SendGrid would be a good choice as they are free to use for small personal projects. After that, follow through the instructions as given by the service so that they could properly receive and send emails.</p>\n<p>After that, you'll need to setup the service to receive emails and &quot;forward&quot; it to your app. To test this out, you'll need to expose your local development web server to the public through services such as <a href=\"https://localtunnel.github.io/www/\">localtunnel</a> or <a href=\"https://ngrok.com/\">ngrok</a>. By default griddler gem handles the incoming emails in <code>/email_processor</code> route, so your setup should include a setting to route your emails through HTTP request to your local web server, such as <code>https://test-localtunnel-11.localtunnel.me/email_processor</code>.</p>\n<p>Now finally it's time to dive in the code. The code snippets below are based on Mailgun service that I configured personally, feel free to substitute with other adapters available to griddler.</p>\n<p>Add these gems to your Gemfile:</p>\n<pre><code>gem 'griddler'\ngem 'griddler-mailgun'\n</code></pre>\n<p>And configure your griddler to use the adapter of your choice:</p>\n<pre><code class=\"language-ruby\">Griddler.configure do |config|\n  config.email_service = :mailgun\nend\n</code></pre>\n<p>Add <code>mount_griddler</code> for the simplest configuration provided by Griddler gem by default. This handles <code>/email_processor</code> route that is handled by <code>Griddler::EmailsController</code> controller provided by the gem.</p>\n<pre><code class=\"language-ruby\">Rails.application.routes.draw do\n  # ...\n  mount_griddler\nend\n</code></pre>\n<p>Add new file named <code>app/models/email_processor.rb</code> with the following code as a template. Note that this section is different from other guides as there seems to be a new syntax being introduced in the gem, as now an instance of <code>EmailProcessor</code> class will be created before <code>process</code> instance method is called (used to be a class method).</p>\n<pre><code class=\"language-ruby\">class EmailProcessor\n  def initialize(email)\n    @email = email\n  end\n\n  def process\n    puts &quot;received email from #{@email.from}:&quot;\n    p @email.body\n  end\nend\n</code></pre>\n<p>Now you can try send an email to your configured domain and observe your local webserver to make sure everything works fine. Advanced configurations (such as handling the route manually or customize your email processor class) is available at the gem README.</p>\n<p>Hope this clarifies out the way to receive emails from your Rails app.</p>\n<p>External Readings:</p>\n<ol>\n<li><a href=\"https://sendgrid.com/blog/receiving-email-in-your-rails-app-with-griddler/\">Receiving Email in Your Rails App With Griddler</a></li>\n<li><a href=\"https://robots.thoughtbot.com/griddler-is-better-than-ever\">Griddler is Better Than Ever!</a></li>\n<li><a href=\"https://github.com/thoughtbot/griddler\">griddler gem</a></li>\n</ol>\n","url":"http://waiyanyoon.com/how-to-receive-emails-in-your-rails-application/","uuid":"a07f4bb2-14cd-40de-986e-bcfa2edfead7","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b6d9c3dbd54885f920892c1"}},{"node":{"id":"Ghost__Post__5b1a743fbd54885f920892ab","title":"Understanding Basics of React Context","slug":"understanding-basics-of-react-context","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":"Use React Context to reduce delegation of properties across a component tree.","created_at_pretty":"08 June, 2018","published_at_pretty":"08 June, 2018","updated_at_pretty":"08 June, 2018","created_at":"2018-06-08T20:19:11.000+08:00","published_at":"2018-06-08T21:40:25.000+08:00","updated_at":"2018-06-08T21:48:20.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"JavaScript","slug":"javascript","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"The use of React Context with renderProps that's introduced since React v16.3 is\nhighly being recommended in React community to pass global level variables to\nchild components, especially when the passing of the props from parent component\nto deep levels of child components, for example:\n\nThe code snippet before using React Context:\n\nimport React from 'react';\n// ...\n\nconst LoggedInUser = ({ user: { name } }) => (\n  <Fragment>\n    <span>Logged in as {name}</span>\n  </Fragment>\n);\n\nconst Navbar = ({ menu, user }) => (\n  <div>\n    <NavigationMenu menus={menu} />\n    <LoggedInUser user={user} />\n  </div>\n);\n\nclass Dashboard extends PureComponent {\n  render() {\n    const menu = [\n      { name: 'Home', url: '/' },\n      { name: 'Preferences', url: '/preferences' }\n    ];\n\n    // user is available at higher level of component\n    const { user, posts } = this.props;\n\n    return (\n      <Fragment>\n        <Navbar menu={menu} user={user} />\n        {posts.map(post => <BlogPost post={post} />)}\n      </Fragment>\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    user: {}\n  };\n\n  componentDidMount() {\n    fetchUser().then(user => {\n      this.setState({ user });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div>\n        <Route url=\"/\" render={() => <Dashboard user={user} />} />\n      </div>\n    );\n  }\n}\n\n\n\nYou'll notice the use of user  is delegated from Dashboard  component down to \nLoggedInUser  without being used by the components along the delegation. It\nincreases complexity when the prop is delegated in a handful of levels down\nespecially when there are multiple props being passed down, which is the case of\nthe React codebase of my company project.\n\nNow we're going to replace the props delegation with React.Context. We first\ncreate an Auth React Context:\n\nimport React, { createContext } from 'react';\n\nconst AuthContext = createContext({ isLoggedIn: false, user: {} });\n\nexport default AuthContext;\n\n\ncreateContext()  will create two sub-components: Provider  and Consumer. \nConsumer  provides render props of an object that contains isLoggedIn  and user \nproperties. Now we 'll consume the user object in Navbar  and remove the props\nfrom Dashboard:\n\nimport React from 'react';\nimport AuthContext from './AuthContext';\n\n// ...\n\n// use AuthContext.Consumer to obtain user object\nconst Navbar = ({ menu, user }) => (\n  <div>\n    <NavigationMenu menus={menu} />\n    <AuthContext.Consumer>\n      {({ isAuth, user }) => <LoggedInUser user={user} />}\n    </AuthContext.Consumer>\n  </div>\n);\n\nclass Dashboard extends Component {\n  render() {\n    const menu = [\n      { name: 'Home', url: '/' },\n      { name: 'Preferences', url: '/preferences' }\n    ];\n\n    const { posts } = this.props;\n\n    // now we removed user from the list of props\n    return (\n      <Fragment>\n        <Navbar menu={menu} />\n        {posts.map(post => <BlogPost post={post} />)}\n      </Fragment>\n    );\n  }\n}\n\n// ...\n\n\nBy using AuthContext.Consumer, we're able to access the user  object directly\nwithout passing it from Dashboard  component, but when we try to log user to the\nconsole, it appears that user is an empty object. This is because the default\nvalue provided by AuthContext  is an empty user. Now we'll set the value of user\nusing AuthContext.Provider:\n\n// ...\n\nclass App extends Component {\n  state = {\n    user: {},\n    isLoggedIn: false\n  };\n\n  componentDidMount() {\n    fetchUser().then(user => {\n      this.setState({ user, isLoggedIn: true });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div>\n        <AuthContext.Provider value={{ user, isLoggedIn }}>\n          <Route url=\"/\" component={Dashboard} />\n        </AuthContext.Provider>\n      </div>\n    );\n  }\n}\n\n// ...\n\n\nNow we have the user information available in the Consumer!\n\n\n--------------------------------------------------------------------------------\n\nReact Context is especially useful for:\n\n 1. User authentication and routes management\n 2. Locale and translations management\n 3. Theme or display settings\n 4. Modal management\n 5. State management (instead of Redux)\n\nThe use of each example above is available in the external links provided below.\nCurrently React Context is only used for ActionCable web socket configuration in\nour project as we've just upgraded the React version to version 16.3.2. There is\na good chance of using it for other purposes within the project to clean up the\ndeep delegation of certain properties.\n\nExternal links:\n 1. https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a\n 2. https://codeburst.io/what-can-react-context-api-do-for-you-multi-language-text-modals-and-theme-switchers-9cfbc8e5ee5e\n 3. https://reactjs.org/docs/context.html","html":"<p>The use of React Context with renderProps that's introduced since React v16.3 is highly being recommended in React community to pass global level variables to child components, especially when the passing of the props from parent component to deep levels of child components, for example:</p>\n<p>The code snippet before using React Context:</p>\n<pre><code class=\"language-javascript\">import React from 'react';\n// ...\n\nconst LoggedInUser = ({ user: { name } }) =&gt; (\n  &lt;Fragment&gt;\n    &lt;span&gt;Logged in as {name}&lt;/span&gt;\n  &lt;/Fragment&gt;\n);\n\nconst Navbar = ({ menu, user }) =&gt; (\n  &lt;div&gt;\n    &lt;NavigationMenu menus={menu} /&gt;\n    &lt;LoggedInUser user={user} /&gt;\n  &lt;/div&gt;\n);\n\nclass Dashboard extends PureComponent {\n  render() {\n    const menu = [\n      { name: 'Home', url: '/' },\n      { name: 'Preferences', url: '/preferences' }\n    ];\n\n    // user is available at higher level of component\n    const { user, posts } = this.props;\n\n    return (\n      &lt;Fragment&gt;\n        &lt;Navbar menu={menu} user={user} /&gt;\n        {posts.map(post =&gt; &lt;BlogPost post={post} /&gt;)}\n      &lt;/Fragment&gt;\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    user: {}\n  };\n\n  componentDidMount() {\n    fetchUser().then(user =&gt; {\n      this.setState({ user });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      &lt;div&gt;\n        &lt;Route url=&quot;/&quot; render={() =&gt; &lt;Dashboard user={user} /&gt;} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n</code></pre>\n<p>You'll notice the use of <code>user</code> is delegated from <code>Dashboard</code> component down to <code>LoggedInUser</code> without being used by the components along the delegation. It increases complexity when the prop is delegated in a handful of levels down especially when there are multiple props being passed down, which is the case of the React codebase of my company project.</p>\n<p>Now we're going to replace the props delegation with React.Context. We first create an Auth React Context:</p>\n<pre><code class=\"language-javascript\">import React, { createContext } from 'react';\n\nconst AuthContext = createContext({ isLoggedIn: false, user: {} });\n\nexport default AuthContext;\n</code></pre>\n<p><code>createContext()</code> will create two sub-components: <code>Provider</code> and <code>Consumer</code>. <code>Consumer</code> provides render props of an object that contains <code>isLoggedIn</code> and <code>user</code> properties. Now we 'll consume the user object in <code>Navbar</code> and remove the props from <code>Dashboard</code>:</p>\n<pre><code class=\"language-javascript\">import React from 'react';\nimport AuthContext from './AuthContext';\n\n// ...\n\n// use AuthContext.Consumer to obtain user object\nconst Navbar = ({ menu, user }) =&gt; (\n  &lt;div&gt;\n    &lt;NavigationMenu menus={menu} /&gt;\n    &lt;AuthContext.Consumer&gt;\n      {({ isAuth, user }) =&gt; &lt;LoggedInUser user={user} /&gt;}\n    &lt;/AuthContext.Consumer&gt;\n  &lt;/div&gt;\n);\n\nclass Dashboard extends Component {\n  render() {\n    const menu = [\n      { name: 'Home', url: '/' },\n      { name: 'Preferences', url: '/preferences' }\n    ];\n\n    const { posts } = this.props;\n\n    // now we removed user from the list of props\n    return (\n      &lt;Fragment&gt;\n        &lt;Navbar menu={menu} /&gt;\n        {posts.map(post =&gt; &lt;BlogPost post={post} /&gt;)}\n      &lt;/Fragment&gt;\n    );\n  }\n}\n\n// ...\n</code></pre>\n<p>By using <code>AuthContext.Consumer</code>, we're able to access the <code>user</code> object directly without passing it from <code>Dashboard</code> component, but when we try to log user to the console, it appears that user is an empty object. This is because the default value provided by <code>AuthContext</code> is an empty user. Now we'll set the value of user using <code>AuthContext.Provider</code>:</p>\n<pre><code class=\"language-javascript\">// ...\n\nclass App extends Component {\n  state = {\n    user: {},\n    isLoggedIn: false\n  };\n\n  componentDidMount() {\n    fetchUser().then(user =&gt; {\n      this.setState({ user, isLoggedIn: true });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      &lt;div&gt;\n        &lt;AuthContext.Provider value={{ user, isLoggedIn }}&gt;\n          &lt;Route url=&quot;/&quot; component={Dashboard} /&gt;\n        &lt;/AuthContext.Provider&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n// ...\n</code></pre>\n<p>Now we have the user information available in the Consumer!</p>\n<hr>\n<p>React Context is especially useful for:</p>\n<ol>\n<li>User authentication and routes management</li>\n<li>Locale and translations management</li>\n<li>Theme or display settings</li>\n<li>Modal management</li>\n<li>State management (instead of Redux)</li>\n</ol>\n<p>The use of each example above is available in the external links provided below. Currently React Context is only used for ActionCable web socket configuration in our project as we've just upgraded the React version to version 16.3.2. There is a good chance of using it for other purposes within the project to clean up the deep delegation of certain properties.</p>\n<h3 id=\"externallinks\">External links:</h3>\n<ol>\n<li><a href=\"https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a\">https://medium.freecodecamp.org/how-to-protect-your-routes-with-react-context-717670c4713a</a></li>\n<li><a href=\"https://codeburst.io/what-can-react-context-api-do-for-you-multi-language-text-modals-and-theme-switchers-9cfbc8e5ee5e\">https://codeburst.io/what-can-react-context-api-do-for-you-multi-language-text-modals-and-theme-switchers-9cfbc8e5ee5e</a></li>\n<li><a href=\"https://reactjs.org/docs/context.html\">https://reactjs.org/docs/context.html</a></li>\n</ol>\n","url":"http://waiyanyoon.com/understanding-basics-of-react-context/","uuid":"a041e3fb-f428-402b-8537-37d36417b9b5","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b1a743fbd54885f920892ab"}},{"node":{"id":"Ghost__Post__5ae9be9ebd54885f92089298","title":"Convert API Result Hash to Ruby Objects","slug":"convert-api-result-hash-to-ruby-objects","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":"This post shows how API result returned in hash in Ruby is better when it's converted to objects, and formatting camel case hash keys to use snake case using a Rails helper method to make it more Ruby-ish.","created_at_pretty":"02 May, 2018","published_at_pretty":"02 May, 2018","updated_at_pretty":"02 May, 2018","created_at":"2018-05-02T21:35:26.000+08:00","published_at":"2018-05-02T22:40:20.000+08:00","updated_at":"2018-05-02T22:45:34.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"ruby","slug":"ruby","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"ruby","slug":"ruby","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"api","slug":"api","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"json","slug":"json","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Note: Examples shown in this post are a fraction or a sample response returned\nfrom Lazada Open Platform:\n\nWithout a sophisticated Ruby SDK, REST APIs return queries in JSON format. This\nis how we normally handle the results returned from API in Ruby:\n\nresult = [{\"is_sale_prop\"=>0, \"name\"=>\"name\", \"input_type\"=>\"text\", \"options\"=>[], \"is_mandatory\"=>1, \"attribute_type\"=>\"normal\", \"label\"=>\"Name\"},\n {\"is_sale_prop\"=>0, \"name\"=>\"short_description\", \"input_type\"=>\"richText\", \"options\"=>[], \"is_mandatory\"=>1, \"attribute_type\"=>\"normal\", \"label\"=>\"Highlights\"},\n {\"is_sale_prop\"=>0, \"name\"=>\"description\", \"input_type\"=>\"richText\", \"options\"=>[], \"is_mandatory\"=>0, \"attribute_type\"=>\"normal\", \"label\"=>\"Product Description\"},\n {\"is_sale_prop\"=>0, \"name\"=>\"video\", \"input_type\"=>\"text\", \"options\"=>[], \"is_mandatory\"=>0, \"attribute_type\"=>\"normal\", \"label\"=>\"Video URL\"},\n {\"is_sale_prop\"=>0, \"name\"=>\"brand\", \"input_type\"=>\"singleSelect\", \"options\"=>[], \"is_mandatory\"=>1, \"attribute_type\"=>\"normal\", \"label\"=>\"Brand\"},\n {\"is_sale_prop\"=>0, \"name\"=>\"model\", \"input_type\"=>\"text\", \"options\"=>[], \"is_mandatory\"=>1, \"attribute_type\"=>\"normal\", \"label\"=>\"Model\"}]\n\n\nTake a look at the first element in the array:\n\n> a_hash = result.first\n# => {\"is_sale_prop\"=>0, \"name\"=>\"name\", \"input_type\"=>\"text\", \"options\"=>[], \"is_mandatory\"=>1, \"attribute_type\"=>\"normal\", \"label\"=>\"Name\"}\n\n\nIn this way the value input_type  can be obtained by the hash key:\n\n> a_hash[\"input_type\"]\n# => \"text\"\n\n\nThis is acceptable in cases where the hash is not frequently being accessed. But\nin cases of heavy usage especially when processing multiple API results, you can\nmake your code better or tidier by converting the API result from hash to an\nobject:\n\n> category_attributes = JSON.parse(result.to_json, object_class: OpenStruct)\n=> [#<OpenStruct is_sale_prop=0, name=\"name\", input_type=\"text\", options=[], is_mandatory=1, attribute_type=\"normal\", label=\"Name\">,\n #<OpenStruct is_sale_prop=0, name=\"short_description\", input_type=\"richText\", options=[], is_mandatory=1, attribute_type=\"normal\", label=\"Highlights\">,\n #<OpenStruct is_sale_prop=0, name=\"description\", input_type=\"richText\", options=[], is_mandatory=0, attribute_type=\"normal\", label=\"Product Description\">,\n #<OpenStruct is_sale_prop=0, name=\"video\", input_type=\"text\", options=[], is_mandatory=0, attribute_type=\"normal\", label=\"Video URL\">,\n #<OpenStruct is_sale_prop=0, name=\"brand\", input_type=\"singleSelect\", options=[], is_mandatory=1, attribute_type=\"normal\", label=\"Brand\">,\n #<OpenStruct is_sale_prop=0, name=\"model\", input_type=\"text\", options=[], is_mandatory=1, attribute_type=\"normal\", label=\"Model\">]\n\n\nNow we can access the attribute directly:\n\n# get the value via object attribute\n> category_attributes.first.input_type\n=> \"text\"\n\n# you can treat it as a hash too\n> category_attributes.first[\"input_type\"]\n=> \"text\"\n\n\nSometimes you have API result which is returned as camel case, but snake case is\nthe de facto standard in Ruby. The example below shows the that camel case is\nbeing used in some keys e.g. Status, SellerSku  and ShopSku.\n\nresponse = {\"code\"=>\"0\",\n \"data\"=>\n  {\"total_products\"=>\"10\",\n   \"products\"=>\n    [{\"skus\"=>\n       [{\"Status\"=>\"active\",\n         \"quantity\"=>0,\n         \"product_weight\"=>\"0.03\",\n         \"Image2\"=>\"http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg\",\n         \"SellerSku\"=>\"39817:01:01\",\n         \"ShopSku\"=>\"BU565ELAX8AGSGAMZ-1104491\",\n         \"Url\"=>\"https://alice.lazada.sg/asd-1083832.html\",\n         \"package_width\"=>\"10.00\",\n         \"special_to_time\"=>\"2020-02-0300:00\",\n         \"special_from_time\"=>\"2015-07-3100:00\",\n         \"package_height\"=>\"4.00\",\n         \"special_price\"=>9,\n         \"price\"=>32,\n         \"package_length\"=>\"10.00\",\n         \"package_weight\"=>\"0.04\",\n         \"Available\"=>0,\n         \"special_to_date\"=>\"2020-02-03\"}],\n      \"primary_category\"=>\"10000211\",\n      \"attributes\"=>{\"short_description\"=>\"Short Description\", \"name\"=>\"asd\", \"description\"=>\"Description\", \"warranty_type\"=>\"International Manufacturer\", \"brand\"=>\"Asante\"}},\n     {\"skus\"=>\n       [{\"Status\"=>\"active\",\n         \"quantity\"=>0,\n         \"product_weight\"=>\"0.03\",\n         \"Image2\"=>\"http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg\",\n         \"SellerSku\"=>\"39817:01:01\",\n         \"ShopSku\"=>\"BU565ELAX8AGSGAMZ-1104491\",\n         \"Url\"=>\"https://alice.lazada.sg/asd-1083832.html\",\n         \"package_width\"=>\"10.00\",\n         \"special_to_time\"=>\"2020-02-0300:00\",\n         \"special_from_time\"=>\"2015-07-3100:00\",\n         \"package_height\"=>\"4.00\",\n         \"special_price\"=>9,\n         \"price\"=>32,\n         \"package_length\"=>\"10.00\",\n         \"package_weight\"=>\"0.04\",\n         \"Available\"=>0,\n         \"special_to_date\"=>\"2020-02-03\"}],\n      \"primary_category\"=>\"10000211\",\n      \"attributes\"=>{\"short_description\"=>\"Short description\", \"name\"=>\"asd\", \"description\"=>\"Description\", \"warranty_type\"=>\"International Manufacturer\", \"brand\"=>\"Asante\"}}]},\n \"request_id\"=>\"0ba2887315178178017221014\"}\n\n\nIt's totally fine if you want the hash keys to remain as camelcase, but if you\nwant to convert the keys to snake case instead, Rails provides a helper to\ntransform your hash keys to underscore:\n\n> response.deep_transform_keys { |key| key.to_s.underscore }\n=> {\"code\"=>\"0\",\n \"data\"=>\n  {\"total_products\"=>\"10\",\n   \"products\"=>\n    [{\"skus\"=>\n       [{\"status\"=>\"active\",\n         \"quantity\"=>0,\n         \"product_weight\"=>\"0.03\",\n         \"image2\"=>\"http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg\",\n         \"seller_sku\"=>\"39817:01:01\",\n         \"shop_sku\"=>\"BU565ELAX8AGSGAMZ-1104491\",\n         \"url\"=>\"https://alice.lazada.sg/asd-1083832.html\",\n         \"package_width\"=>\"10.00\",\n         \"special_to_time\"=>\"2020-02-0300:00\",\n         \"special_from_time\"=>\"2015-07-3100:00\",\n         \"package_height\"=>\"4.00\",\n         \"special_price\"=>9,\n         \"price\"=>32,\n         \"package_length\"=>\"10.00\",\n         \"package_weight\"=>\"0.04\",\n         \"available\"=>0,\n         \"special_to_date\"=>\"2020-02-03\"}],\n      \"primary_category\"=>\"10000211\",\n      \"attributes\"=>{\"short_description\"=>\"Short Description\", \"name\"=>\"asd\", \"description\"=>\"Description\", \"warranty_type\"=>\"International Manufacturer\", \"brand\"=>\"Asante\"}},\n     {\"skus\"=>\n       [{\"status\"=>\"active\",\n         \"quantity\"=>0,\n         \"product_weight\"=>\"0.03\",\n         \"image2\"=>\"http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg\",\n         \"seller_sku\"=>\"39817:01:01\",\n         \"shop_sku\"=>\"BU565ELAX8AGSGAMZ-1104491\",\n         \"url\"=>\"https://alice.lazada.sg/asd-1083832.html\",\n         \"package_width\"=>\"10.00\",\n         \"special_to_time\"=>\"2020-02-0300:00\",\n         \"special_from_time\"=>\"2015-07-3100:00\",\n         \"package_height\"=>\"4.00\",\n         \"special_price\"=>9,\n         \"price\"=>32,\n         \"package_length\"=>\"10.00\",\n         \"package_weight\"=>\"0.04\",\n         \"available\"=>0,\n         \"special_to_date\"=>\"2020-02-03\"}],\n      \"primary_category\"=>\"10000211\",\n      \"attributes\"=>{\"short_description\"=>\"Short description\", \"name\"=>\"asd\", \"description\"=>\"Description\", \"warranty_type\"=>\"International Manufacturer\", \"brand\"=>\"Asante\"}}]},\n \"request_id\"=>\"0ba2887315178178017221014\"}\n\n\nThese snippets comes in handy while dealing with external APIs which the\nresponse returned is not under control. While using hash or keys with camel case\nwon't cause any problem, but it might somehow hurt the readability of the code\nwhen hash is frequently being used while processing the response, which happened\nin one of our project. Converting the hash to object is recommended unless\nmemory and performance tweaking is in priority.\n\nExternal reading\n 1. https://coderwall.com/p/74rajw/convert-a-complex-nested-hash-to-an-object\n 2. https://stackoverflow.com/questions/8706930/converting-nested-hash-keys-from-camelcase-to-snake-case-in-ruby/40093995?noredirect=1#comment72573345_40093995","html":"<p>Note: Examples shown in this post are a fraction or a sample response returned from Lazada Open Platform:</p>\n<p>Without a sophisticated Ruby SDK, REST APIs return queries in JSON format. This is how we normally handle the results returned from API in Ruby:</p>\n<pre><code class=\"language-ruby\">result = [{&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;name&quot;, &quot;input_type&quot;=&gt;&quot;text&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Name&quot;},\n {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;short_description&quot;, &quot;input_type&quot;=&gt;&quot;richText&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Highlights&quot;},\n {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;description&quot;, &quot;input_type&quot;=&gt;&quot;richText&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;0, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Product Description&quot;},\n {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;video&quot;, &quot;input_type&quot;=&gt;&quot;text&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;0, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Video URL&quot;},\n {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;brand&quot;, &quot;input_type&quot;=&gt;&quot;singleSelect&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Brand&quot;},\n {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;model&quot;, &quot;input_type&quot;=&gt;&quot;text&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Model&quot;}]\n</code></pre>\n<p>Take a look at the first element in the array:</p>\n<pre><code class=\"language-ruby\">&gt; a_hash = result.first\n# =&gt; {&quot;is_sale_prop&quot;=&gt;0, &quot;name&quot;=&gt;&quot;name&quot;, &quot;input_type&quot;=&gt;&quot;text&quot;, &quot;options&quot;=&gt;[], &quot;is_mandatory&quot;=&gt;1, &quot;attribute_type&quot;=&gt;&quot;normal&quot;, &quot;label&quot;=&gt;&quot;Name&quot;}\n</code></pre>\n<p>In this way the value <code>input_type</code> can be obtained by the hash key:</p>\n<pre><code class=\"language-ruby\">&gt; a_hash[&quot;input_type&quot;]\n# =&gt; &quot;text&quot;\n</code></pre>\n<p>This is acceptable in cases where the hash is not frequently being accessed. But in cases of heavy usage especially when processing multiple API results, you can make your code better or tidier by converting the API result from hash to an object:</p>\n<pre><code class=\"language-ruby\">&gt; category_attributes = JSON.parse(result.to_json, object_class: OpenStruct)\n=&gt; [#&lt;OpenStruct is_sale_prop=0, name=&quot;name&quot;, input_type=&quot;text&quot;, options=[], is_mandatory=1, attribute_type=&quot;normal&quot;, label=&quot;Name&quot;&gt;,\n #&lt;OpenStruct is_sale_prop=0, name=&quot;short_description&quot;, input_type=&quot;richText&quot;, options=[], is_mandatory=1, attribute_type=&quot;normal&quot;, label=&quot;Highlights&quot;&gt;,\n #&lt;OpenStruct is_sale_prop=0, name=&quot;description&quot;, input_type=&quot;richText&quot;, options=[], is_mandatory=0, attribute_type=&quot;normal&quot;, label=&quot;Product Description&quot;&gt;,\n #&lt;OpenStruct is_sale_prop=0, name=&quot;video&quot;, input_type=&quot;text&quot;, options=[], is_mandatory=0, attribute_type=&quot;normal&quot;, label=&quot;Video URL&quot;&gt;,\n #&lt;OpenStruct is_sale_prop=0, name=&quot;brand&quot;, input_type=&quot;singleSelect&quot;, options=[], is_mandatory=1, attribute_type=&quot;normal&quot;, label=&quot;Brand&quot;&gt;,\n #&lt;OpenStruct is_sale_prop=0, name=&quot;model&quot;, input_type=&quot;text&quot;, options=[], is_mandatory=1, attribute_type=&quot;normal&quot;, label=&quot;Model&quot;&gt;]\n</code></pre>\n<p>Now we can access the attribute directly:</p>\n<pre><code class=\"language-ruby\"># get the value via object attribute\n&gt; category_attributes.first.input_type\n=&gt; &quot;text&quot;\n\n# you can treat it as a hash too\n&gt; category_attributes.first[&quot;input_type&quot;]\n=&gt; &quot;text&quot;\n</code></pre>\n<p>Sometimes you have API result which is returned as camel case, but snake case is the de facto standard in Ruby. The example below shows the that camel case is being used in some keys e.g. <code>Status</code>, <code>SellerSku</code> and <code>ShopSku</code>.</p>\n<pre><code class=\"language-ruby\">response = {&quot;code&quot;=&gt;&quot;0&quot;,\n &quot;data&quot;=&gt;\n  {&quot;total_products&quot;=&gt;&quot;10&quot;,\n   &quot;products&quot;=&gt;\n    [{&quot;skus&quot;=&gt;\n       [{&quot;Status&quot;=&gt;&quot;active&quot;,\n         &quot;quantity&quot;=&gt;0,\n         &quot;product_weight&quot;=&gt;&quot;0.03&quot;,\n         &quot;Image2&quot;=&gt;&quot;http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg&quot;,\n         &quot;SellerSku&quot;=&gt;&quot;39817:01:01&quot;,\n         &quot;ShopSku&quot;=&gt;&quot;BU565ELAX8AGSGAMZ-1104491&quot;,\n         &quot;Url&quot;=&gt;&quot;https://alice.lazada.sg/asd-1083832.html&quot;,\n         &quot;package_width&quot;=&gt;&quot;10.00&quot;,\n         &quot;special_to_time&quot;=&gt;&quot;2020-02-0300:00&quot;,\n         &quot;special_from_time&quot;=&gt;&quot;2015-07-3100:00&quot;,\n         &quot;package_height&quot;=&gt;&quot;4.00&quot;,\n         &quot;special_price&quot;=&gt;9,\n         &quot;price&quot;=&gt;32,\n         &quot;package_length&quot;=&gt;&quot;10.00&quot;,\n         &quot;package_weight&quot;=&gt;&quot;0.04&quot;,\n         &quot;Available&quot;=&gt;0,\n         &quot;special_to_date&quot;=&gt;&quot;2020-02-03&quot;}],\n      &quot;primary_category&quot;=&gt;&quot;10000211&quot;,\n      &quot;attributes&quot;=&gt;{&quot;short_description&quot;=&gt;&quot;Short Description&quot;, &quot;name&quot;=&gt;&quot;asd&quot;, &quot;description&quot;=&gt;&quot;Description&quot;, &quot;warranty_type&quot;=&gt;&quot;International Manufacturer&quot;, &quot;brand&quot;=&gt;&quot;Asante&quot;}},\n     {&quot;skus&quot;=&gt;\n       [{&quot;Status&quot;=&gt;&quot;active&quot;,\n         &quot;quantity&quot;=&gt;0,\n         &quot;product_weight&quot;=&gt;&quot;0.03&quot;,\n         &quot;Image2&quot;=&gt;&quot;http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg&quot;,\n         &quot;SellerSku&quot;=&gt;&quot;39817:01:01&quot;,\n         &quot;ShopSku&quot;=&gt;&quot;BU565ELAX8AGSGAMZ-1104491&quot;,\n         &quot;Url&quot;=&gt;&quot;https://alice.lazada.sg/asd-1083832.html&quot;,\n         &quot;package_width&quot;=&gt;&quot;10.00&quot;,\n         &quot;special_to_time&quot;=&gt;&quot;2020-02-0300:00&quot;,\n         &quot;special_from_time&quot;=&gt;&quot;2015-07-3100:00&quot;,\n         &quot;package_height&quot;=&gt;&quot;4.00&quot;,\n         &quot;special_price&quot;=&gt;9,\n         &quot;price&quot;=&gt;32,\n         &quot;package_length&quot;=&gt;&quot;10.00&quot;,\n         &quot;package_weight&quot;=&gt;&quot;0.04&quot;,\n         &quot;Available&quot;=&gt;0,\n         &quot;special_to_date&quot;=&gt;&quot;2020-02-03&quot;}],\n      &quot;primary_category&quot;=&gt;&quot;10000211&quot;,\n      &quot;attributes&quot;=&gt;{&quot;short_description&quot;=&gt;&quot;Short description&quot;, &quot;name&quot;=&gt;&quot;asd&quot;, &quot;description&quot;=&gt;&quot;Description&quot;, &quot;warranty_type&quot;=&gt;&quot;International Manufacturer&quot;, &quot;brand&quot;=&gt;&quot;Asante&quot;}}]},\n &quot;request_id&quot;=&gt;&quot;0ba2887315178178017221014&quot;}\n</code></pre>\n<p>It's totally fine if you want the hash keys to remain as camelcase, but if you want to convert the keys to snake case instead, Rails provides a helper to transform your hash keys to underscore:</p>\n<pre><code class=\"language-ruby\">&gt; response.deep_transform_keys { |key| key.to_s.underscore }\n=&gt; {&quot;code&quot;=&gt;&quot;0&quot;,\n &quot;data&quot;=&gt;\n  {&quot;total_products&quot;=&gt;&quot;10&quot;,\n   &quot;products&quot;=&gt;\n    [{&quot;skus&quot;=&gt;\n       [{&quot;status&quot;=&gt;&quot;active&quot;,\n         &quot;quantity&quot;=&gt;0,\n         &quot;product_weight&quot;=&gt;&quot;0.03&quot;,\n         &quot;image2&quot;=&gt;&quot;http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg&quot;,\n         &quot;seller_sku&quot;=&gt;&quot;39817:01:01&quot;,\n         &quot;shop_sku&quot;=&gt;&quot;BU565ELAX8AGSGAMZ-1104491&quot;,\n         &quot;url&quot;=&gt;&quot;https://alice.lazada.sg/asd-1083832.html&quot;,\n         &quot;package_width&quot;=&gt;&quot;10.00&quot;,\n         &quot;special_to_time&quot;=&gt;&quot;2020-02-0300:00&quot;,\n         &quot;special_from_time&quot;=&gt;&quot;2015-07-3100:00&quot;,\n         &quot;package_height&quot;=&gt;&quot;4.00&quot;,\n         &quot;special_price&quot;=&gt;9,\n         &quot;price&quot;=&gt;32,\n         &quot;package_length&quot;=&gt;&quot;10.00&quot;,\n         &quot;package_weight&quot;=&gt;&quot;0.04&quot;,\n         &quot;available&quot;=&gt;0,\n         &quot;special_to_date&quot;=&gt;&quot;2020-02-03&quot;}],\n      &quot;primary_category&quot;=&gt;&quot;10000211&quot;,\n      &quot;attributes&quot;=&gt;{&quot;short_description&quot;=&gt;&quot;Short Description&quot;, &quot;name&quot;=&gt;&quot;asd&quot;, &quot;description&quot;=&gt;&quot;Description&quot;, &quot;warranty_type&quot;=&gt;&quot;International Manufacturer&quot;, &quot;brand&quot;=&gt;&quot;Asante&quot;}},\n     {&quot;skus&quot;=&gt;\n       [{&quot;status&quot;=&gt;&quot;active&quot;,\n         &quot;quantity&quot;=&gt;0,\n         &quot;product_weight&quot;=&gt;&quot;0.03&quot;,\n         &quot;image2&quot;=&gt;&quot;http://sg-live-01.slatic.net/p/BUYI1-catalog.jpg&quot;,\n         &quot;seller_sku&quot;=&gt;&quot;39817:01:01&quot;,\n         &quot;shop_sku&quot;=&gt;&quot;BU565ELAX8AGSGAMZ-1104491&quot;,\n         &quot;url&quot;=&gt;&quot;https://alice.lazada.sg/asd-1083832.html&quot;,\n         &quot;package_width&quot;=&gt;&quot;10.00&quot;,\n         &quot;special_to_time&quot;=&gt;&quot;2020-02-0300:00&quot;,\n         &quot;special_from_time&quot;=&gt;&quot;2015-07-3100:00&quot;,\n         &quot;package_height&quot;=&gt;&quot;4.00&quot;,\n         &quot;special_price&quot;=&gt;9,\n         &quot;price&quot;=&gt;32,\n         &quot;package_length&quot;=&gt;&quot;10.00&quot;,\n         &quot;package_weight&quot;=&gt;&quot;0.04&quot;,\n         &quot;available&quot;=&gt;0,\n         &quot;special_to_date&quot;=&gt;&quot;2020-02-03&quot;}],\n      &quot;primary_category&quot;=&gt;&quot;10000211&quot;,\n      &quot;attributes&quot;=&gt;{&quot;short_description&quot;=&gt;&quot;Short description&quot;, &quot;name&quot;=&gt;&quot;asd&quot;, &quot;description&quot;=&gt;&quot;Description&quot;, &quot;warranty_type&quot;=&gt;&quot;International Manufacturer&quot;, &quot;brand&quot;=&gt;&quot;Asante&quot;}}]},\n &quot;request_id&quot;=&gt;&quot;0ba2887315178178017221014&quot;}\n</code></pre>\n<p>These snippets comes in handy while dealing with external APIs which the response returned is not under control. While using hash or keys with camel case won't cause any problem, but it might somehow hurt the readability of the code when hash is frequently being used while processing the response, which happened in one of our project. Converting the hash to object is recommended unless memory and performance tweaking is in priority.</p>\n<h2 id=\"externalreading\">External reading</h2>\n<ol>\n<li><a href=\"https://coderwall.com/p/74rajw/convert-a-complex-nested-hash-to-an-object\">https://coderwall.com/p/74rajw/convert-a-complex-nested-hash-to-an-object</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8706930/converting-nested-hash-keys-from-camelcase-to-snake-case-in-ruby/40093995?noredirect=1#comment72573345_40093995\">https://stackoverflow.com/questions/8706930/converting-nested-hash-keys-from-camelcase-to-snake-case-in-ruby/40093995?noredirect=1#comment72573345_40093995</a></li>\n</ol>\n","url":"http://waiyanyoon.com/convert-api-result-hash-to-ruby-objects/","uuid":"98c3ff5c-33bb-4575-a719-be41c2b1f2bb","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae9be9ebd54885f92089298"}},{"node":{"id":"Ghost__Post__5ae3138ebd54885f9208928f","title":"The Art of Finding a Lost Ruby Gem","slug":"the-art-of-finding-a-lost-rubygem","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":"This post shares how a forked gem was found in a place that has replicated the fork, which was removed some while ago from the remote source, Github.","created_at_pretty":"27 April, 2018","published_at_pretty":"27 April, 2018","updated_at_pretty":"27 April, 2018","created_at":"2018-04-27T20:11:58.000+08:00","published_at":"2018-04-27T21:30:42.000+08:00","updated_at":"2018-04-27T21:54:10.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"rubygem","slug":"rubygem","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"ruby","slug":"ruby","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Context\nA project was remained almost untouched for a year and it was out of dust\nrecently for migrating a deprecating API. For frontend project using React on\nRuby on Rails, things are moving fast enough that react-rails\n[https://github.com/reactjs/react-rails]  is no longer needed and webpacker\n[https://github.com/rails/webpacker]  is officially introduced to use ES6 and\nnpm libraries for the frontend pages, all this within a year. A react-data-grid\n[https://github.com/adazzle/react-data-grid]  npm library was found and jquery\nis no more needed to make things work in jquery bootstrap-table\n[https://github.com/wenzhixin/bootstrap-table]  is no longer needed in a React\necosystem.\n\nOther than that, this project was using a fork of a Rails assets gem which\ncontains the minified library of react-bootstrap  npm library, which was removed\nfrom Github, and the original repo\n[https://github.com/mariopeixoto/react-bootstrap-rails]  remains unmantained.\n\nProblem\nWe were forced to use the original repo of the gem but unfortunately there are \ninputRef  errors in React Bootstrap which was hard to trace down. I asked the\nfork owner to recall what was changed to make it work, but we couldn't trace\ndown what was changed in the fork.\n\nSolution\nOne great hint to the solution of the problem is that the project works on\nproduction, so I guess the repo is somewhere inside our production server. Right\nafter this idea popped out my mind, I did a quick tour on the production server\nroot and pry open the gem:\n\n$ EDITOR=vim bundle open react-bootstrap-rails\n\n\n\" ============================================================================\n\" Netrw Directory Listing                                        (netrw v155)\n\"   /var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d\n\"   Sorted by      name\n\"   Sort sequence: [\\/]$,\\<core\\%(\\.\\d\\+\\)\\=\\>,\\.h$,\\.c$,\\.cpp$,\\~\\=\\*$,*,\\.o$,\\.obj$,\\.\n\"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:special\n\" ==============================================================================\n../\n...\n\n\nThe directory of the gem shows up like a puzzle game. Changed my current working\ndirectory to the gem directory:\n\n$ cd /var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d\n\n\nthen checked the git log to trace the latest change.\n\n$ git log\n\n\nBingo! This is the lost gem we're trying to find:\n\ncommit 025316434534db0514edf527f336ad8e8474437c1\nAuthor: The Fork Author <author@email.com>\nDate:   Fri Jan 6 16:20:46 2017 +0800\n\n    bump version to 0.30.7\n\ncommit 3870d765ed93d40537353216de3e36332223247b\nAuthor: Mario Peixoto <mario.peixoto@gmail.com>\nDate:   Thu Dec 29 15:57:40 2016 -0600\n\n    Adding warning to README\n\n\n\nSo I quickly copied the gem to my local:\n\nscp -r user@my.server.ip.address:/var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d ~/Desktop/\n\n\nand source it in my project's Gemfile:\n\ngem 'react-bootstrap-rails', path: '~/Desktop/react-bootstrap-rails-025316434534d'\n\n\nnow my local clone has finally worked! Later that I pushed the gem into a repo\nunder the company's ownership so that we could still use it internally without\nbeing dependent to external source.\n\nConclusion\nThe steps looks simple and trivial, but the whole process of seeking out the\ntruth of broken frontend that's hard to trace and the lost of art of the fork\nfeels like a puzzle game for me solve. Certain level of fun is engaged which\nhelps with the boredom of daily coding.\n\nNote: As you might have noticed, the exact path, project, and the information of\nthe fork author are all modified and changed to preserve privacy.","html":"<h2 id=\"context\">Context</h2>\n<p>A project was remained almost untouched for a year and it was out of dust recently for migrating a deprecating API. For frontend project using React on Ruby on Rails, things are moving fast enough that <a href=\"https://github.com/reactjs/react-rails\">react-rails</a> is no longer needed and <a href=\"https://github.com/rails/webpacker\">webpacker</a> is officially introduced to use ES6 and npm libraries for the frontend pages, all this within a year. A <a href=\"https://github.com/adazzle/react-data-grid\">react-data-grid</a> npm library was found and jquery is no more needed to make things work in jquery <a href=\"https://github.com/wenzhixin/bootstrap-table\">bootstrap-table</a> is no longer needed in a React ecosystem.</p>\n<p>Other than that, this project was using a fork of a Rails assets gem which contains the minified library of <code>react-bootstrap</code> npm library, which was removed from Github, and the <a href=\"https://github.com/mariopeixoto/react-bootstrap-rails\">original repo</a> remains unmantained.</p>\n<h2 id=\"problem\">Problem</h2>\n<p>We were forced to use the original repo of the gem but unfortunately there are <code>inputRef</code> errors in React Bootstrap which was hard to trace down. I asked the fork owner to recall what was changed to make it work, but we couldn't trace down what was changed in the fork.</p>\n<h2 id=\"solution\">Solution</h2>\n<p>One great hint to the solution of the problem is that the project works on production, so I guess the repo is somewhere inside our production server. Right after this idea popped out my mind, I did a quick tour on the production server root and pry open the gem:</p>\n<pre><code class=\"language-bash\">$ EDITOR=vim bundle open react-bootstrap-rails\n</code></pre>\n<pre><code class=\"language-vim\">&quot; ============================================================================\n&quot; Netrw Directory Listing                                        (netrw v155)\n&quot;   /var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d\n&quot;   Sorted by      name\n&quot;   Sort sequence: [\\/]$,\\&lt;core\\%(\\.\\d\\+\\)\\=\\&gt;,\\.h$,\\.c$,\\.cpp$,\\~\\=\\*$,*,\\.o$,\\.obj$,\\.\n&quot;   Quick Help: &lt;F1&gt;:help  -:go up dir  D:delete  R:rename  s:sort-by  x:special\n&quot; ==============================================================================\n../\n...\n</code></pre>\n<p>The directory of the gem shows up like a puzzle game. Changed my current working directory to the gem directory:</p>\n<pre><code class=\"language-bash\">$ cd /var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d\n</code></pre>\n<p>then checked the git log to trace the latest change.</p>\n<pre><code class=\"language-bash\">$ git log\n</code></pre>\n<p>Bingo! This is the lost gem we're trying to find:</p>\n<pre><code>commit 025316434534db0514edf527f336ad8e8474437c1\nAuthor: The Fork Author &lt;author@email.com&gt;\nDate:   Fri Jan 6 16:20:46 2017 +0800\n\n    bump version to 0.30.7\n\ncommit 3870d765ed93d40537353216de3e36332223247b\nAuthor: Mario Peixoto &lt;mario.peixoto@gmail.com&gt;\nDate:   Thu Dec 29 15:57:40 2016 -0600\n\n    Adding warning to README\n\n</code></pre>\n<p>So I quickly copied the gem to my local:</p>\n<pre><code>scp -r user@my.server.ip.address:/var/www/the-project/shared/bundle/ruby/2.3.0/bundler/gems/react-bootstrap-rails-025316434534d ~/Desktop/\n</code></pre>\n<p>and source it in my project's Gemfile:</p>\n<pre><code class=\"language-ruby\">gem 'react-bootstrap-rails', path: '~/Desktop/react-bootstrap-rails-025316434534d'\n</code></pre>\n<p>now my local clone has finally worked! Later that I pushed the gem into a repo under the company's ownership so that we could still use it internally without being dependent to external source.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The steps looks simple and trivial, but the whole process of seeking out the truth of broken frontend that's hard to trace and the lost of art of the fork feels like a puzzle game for me solve. Certain level of fun is engaged which helps with the boredom of daily coding.</p>\n<p>Note: As you might have noticed, the exact path, project, and the information of the fork author are all modified and changed to preserve privacy.</p>\n","url":"http://waiyanyoon.com/the-art-of-finding-a-lost-rubygem/","uuid":"6b3fd3ee-a508-4a07-bec4-07244ad0bd5e","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae3138ebd54885f9208928f"}},{"node":{"id":"Ghost__Post__5ae1cd81bd54885f92089288","title":"Use of React.Fragment","slug":"react-fragment","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":"Use React Fragment to wrap adjacent components instead of `div`.","created_at_pretty":"26 April, 2018","published_at_pretty":"26 April, 2018","updated_at_pretty":"27 April, 2018","created_at":"2018-04-26T21:00:49.000+08:00","published_at":"2018-04-26T21:30:21.000+08:00","updated_at":"2018-04-27T09:37:37.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"React","slug":"react","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"JavaScript","slug":"javascript","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"React developers know what does it mean when they saw this error:\n\nAdjacent JSX elements must be wrapped in an enclosing tag\n\nIt's simply fixed by adding <div>  tags between the element. At least it used to\nbe, until I saw React.Fragment  in a blog and read the new official\ndocumentation of React. It's as simple as replacing <div>  tag with \nReact.Fragment:\n\nimport React, { Fragment } from 'react';\n\nconst MyFragment = () => (\n    return (\n        <Fragment>\n            <div>First div</div>\n            <div>Second div</div>\n        </Fragment>\n    )\n);\n\nexport default MyFragment;\n\n\nThe use of <Fragment>  will not render extra <div>  tag, which is a good news in\ncertain case of styling.","html":"<p>React developers know what does it mean when they saw this error:</p>\n<blockquote>\n<p>Adjacent JSX elements must be wrapped in an enclosing tag</p>\n</blockquote>\n<p>It's simply fixed by adding <code>&lt;div&gt;</code> tags between the element. At least it used to be, until I saw <code>React.Fragment</code> in a blog and read the new official documentation of React. It's as simple as replacing <code>&lt;div&gt;</code> tag with <code>React.Fragment</code>:</p>\n<pre><code class=\"language-javacript\">import React, { Fragment } from 'react';\n\nconst MyFragment = () =&gt; (\n    return (\n        &lt;Fragment&gt;\n            &lt;div&gt;First div&lt;/div&gt;\n            &lt;div&gt;Second div&lt;/div&gt;\n        &lt;/Fragment&gt;\n    )\n);\n\nexport default MyFragment;\n</code></pre>\n<p>The use of <code>&lt;Fragment&gt;</code> will not render extra <code>&lt;div&gt;</code> tag, which is a good news in certain case of styling.</p>\n","url":"http://waiyanyoon.com/react-fragment/","uuid":"488e128f-b71f-4c93-af5f-a8cfd39277b5","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae1cd81bd54885f92089288"}},{"node":{"id":"Ghost__Post__5ae08747bd54885f92089279","title":"Deploying Rails 5.2 Applications with New Encrypted Credentials using Capistrano","slug":"deploying-rails-5-2-applications-with-encrypted-credentials-using-capistrano","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":"Rails 5.2 way of managing the credentials are different from previous Rails versions. This post talks about the error that may occur during the first time deployment of your Rails 5.2 app to your server using Capistrano.","created_at_pretty":"25 April, 2018","published_at_pretty":"25 April, 2018","updated_at_pretty":"15 April, 2019","created_at":"2018-04-25T21:48:55.000+08:00","published_at":"2018-04-25T22:47:44.000+08:00","updated_at":"2019-04-15T13:54:55.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"capistrano","slug":"capistrano","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"deployment","slug":"deployment","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"security","slug":"security","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Context\nRails 5.2 has been released with dozens of new features, which highlights the\nrelease of ActiveStorage and a new way to deal with encrypted credentials within\nthe codebase. This post highlights how encrypted credentials has changed the way\nsecret keys are managed in Rails applications and how it affects the deployment\nprocess.\n\nLet's see what's the key difference of the credentials management between Rails\n5.2 and previous versions:\n\nBefore Rails 5.2\n * secret_key_base  was located in config/secrets.yml\n * Every credentials have to be configured in environment variables to keep the\n   credentials secure.\n * The environment variables are all being called in config/secrets.yml\n\nChanges Introduced Since Rails 5.2\n * The credentials are encrypted in local  with the use of config/master.key. \n   config/master.key  will be ignored in git by default.\n * The encrypted credentials commited to repo is the encrypted version of\n   credentials: config/credentials.yml.enc\n * We use the command $ rails credentials:edit(or $ EDITOR=vim rails\n   credentials:edit  if EDITOR  is not configured) to edit the credentils.\n\nDeployment Issue Related to Encrypted Credentials\nProblem comes in when config/master.key  is not commited in the repo. When \nconfig/master.key  is not found in the production server, the Rails app in the\nserver couldn't decrypt the credentials thus the credentials couldn't be used.\n\nWe failed to deploy to production due to this error:\n\nArgumentError: Missing `secret_key_base` for 'production' environment, set this string with `rails credentials:edit`\n\n\nSolution\nThere are two ways to put the master key to production server:\n\n 1. Use of environment keys (ENV[RAILS_MASTER_KEY])\n 2. Copy config/master.key  to your server manually without commiting to git\n\nSolution #1 didn't work out well for capistrano in our case, thus we have used\nsolution #2 for this app. Copying the file to production server that's being\nmanaged by capistrano means I have to configure something so that I don't copy\nthe same key to server everytime we deploy the application. These are the steps\nto deploy the application successfully for the first time:\n\n 1. Copy config/master.key  from local filesystem to the production server under\n     <project_root>/shared/config/master.key.\n 2. Configure capistrano's config/deploy.rb  to include this line:  set :linked_files, %w{config/master.key}\n    \n    \n    By doing this you're telling Capistrano to symlink config/master.key  to \n    <project_root>/shared/config/master.key  which contains the master key\n    you've just copied to the server.\n 3. Deploy app again and verify that deployment is successful.\n 4. Commit this confguration changes. Don't check-in config/master.key!\n\nConclusion\nThis way of how credentials are managed might seem complicated at first glance,\nbut thinking of how they are being managed locally without exposing it in the\ngit repo, the way of copying master key to production and sharing master key to\nyour colleagues seems to be easier compared to setting up environment variables\nremotely and informing the tech team when there's any change on the credentials.\nIt helps to secure the credentials by not exposing the credentials explicitly to\neach member of your team too.\n\nReferences / External Links\n 1. https://keithpblog.org/post/encrypted-secrets/\n 2. https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2","html":"<h2 id=\"context\">Context</h2>\n<p>Rails 5.2 has been released with dozens of new features, which highlights the release of ActiveStorage and a new way to deal with encrypted credentials within the codebase. This post highlights how encrypted credentials has changed the way secret keys are managed in Rails applications and how it affects the deployment process.</p>\n<p>Let's see what's the key difference of the credentials management between Rails 5.2 and previous versions:</p>\n<h3 id=\"beforerails52\">Before Rails 5.2</h3>\n<ul>\n<li><code>secret_key_base</code> was located in <code>config/secrets.yml</code></li>\n<li>Every credentials have to be configured in environment variables to keep the credentials secure.</li>\n<li>The environment variables are all being called in <code>config/secrets.yml</code></li>\n</ul>\n<h3 id=\"changesintroducedsincerails52\">Changes Introduced Since Rails 5.2</h3>\n<ul>\n<li>The credentials are <strong>encrypted in local</strong> with the use of <code>config/master.key</code>. <code>config/master.key</code> will be ignored in git by default.</li>\n<li>The encrypted credentials commited to repo is the encrypted version of credentials: <code>config/credentials.yml.enc</code></li>\n<li>We use the command <code>$ rails credentials:edit</code>(or <code>$ EDITOR=vim rails credentials:edit</code> if <code>EDITOR</code> is not configured) to edit the credentils.</li>\n</ul>\n<h2 id=\"deploymentissuerelatedtoencryptedcredentials\">Deployment Issue Related to Encrypted Credentials</h2>\n<p>Problem comes in when <code>config/master.key</code> is not commited in the repo. When <code>config/master.key</code> is not found in the production server, the Rails app in the server couldn't decrypt the credentials thus the credentials couldn't be used.</p>\n<p>We failed to deploy to production due to this error:</p>\n<pre><code class=\"language-bash\">ArgumentError: Missing `secret_key_base` for 'production' environment, set this string with `rails credentials:edit`\n</code></pre>\n<h2 id=\"solution\">Solution</h2>\n<p>There are two ways to put the master key to production server:</p>\n<ol>\n<li>Use of environment keys (<code>ENV[RAILS_MASTER_KEY]</code>)</li>\n<li>Copy <code>config/master.key</code> to your server manually without commiting to git</li>\n</ol>\n<p>Solution #1 didn't work out well for capistrano in our case, thus we have used solution #2 for this app. Copying the file to production server that's being managed by capistrano means I have to configure something so that I don't copy the same key to server everytime we deploy the application. These are the steps to deploy the application successfully for the first time:</p>\n<ol>\n<li>Copy <code>config/master.key</code> from local filesystem to the production server under <code>&lt;project_root&gt;/shared/config/master.key</code>.</li>\n<li>Configure capistrano's <code>config/deploy.rb</code> to include this line:<pre><code class=\"language-ruby\">  set :linked_files, %w{config/master.key}\n</code></pre>\nBy doing this you're telling Capistrano to symlink <code>config/master.key</code> to <code>&lt;project_root&gt;/shared/config/master.key</code> which contains the master key you've just copied to the server.</li>\n<li>Deploy app again and verify that deployment is successful.</li>\n<li>Commit this confguration changes. Don't check-in <code>config/master.key</code>!</li>\n</ol>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This way of how credentials are managed might seem complicated at first glance, but thinking of how they are being managed locally without exposing it in the git repo, the way of copying master key to production and sharing master key to your colleagues seems to be easier compared to setting up environment variables remotely and informing the tech team when there's any change on the credentials. It helps to secure the credentials by not exposing the credentials explicitly to each member of your team too.</p>\n<h2 id=\"referencesexternallinks\">References / External Links</h2>\n<ol>\n<li><a href=\"https://keithpblog.org/post/encrypted-secrets/\">https://keithpblog.org/post/encrypted-secrets/</a></li>\n<li><a href=\"https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2\">https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2</a></li>\n</ol>\n","url":"http://waiyanyoon.com/deploying-rails-5-2-applications-with-encrypted-credentials-using-capistrano/","uuid":"5f4af5c5-f167-4ed0-8eb5-668ef4b34133","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae08747bd54885f92089279"}},{"node":{"id":"Ghost__Post__5ae07cf41e31635d585d655a","title":"Still Using Rake for Commands in Your Rails 5 Projects?","slug":"still-using-rake-for-commands-in-your-rails-5-projects","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":"`rake` commands often cause problems due to different bundler versions. This newer alternate has improved the dev workflow without using `bundle exec`.","created_at_pretty":"25 April, 2018","published_at_pretty":"09 April, 2018","updated_at_pretty":"25 April, 2018","created_at":"2018-04-25T21:04:52.000+08:00","published_at":"2018-04-09T17:01:00.000+08:00","updated_at":"2018-04-25T21:07:36.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"While it's programmed in my brain to use rake  commands for migrations and\ntasks, I find it very useful to use rails  command instead of rake  which is\nintroduced since Rails 5 to unify the use of rails commands. Using rake \ncommands in Rails projects normally cause errors because of the bundler version:\n\n$ rake jobs:workoff\nrake aborted!\nGem::LoadError: You have already activated rake 12.3.1, but your Gemfile requires rake 12.3.0. Prepending `bundle exec` to your command may solve this.\n/Users/waiyanyoon/Documents/workspace/project/config/boot.rb:3:in `<top (required)>'\n/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `require_relative'\n/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `<top (required)>'\n/Users/waiyanyoon/Documents/workspace/project/Rakefile:4:in `<top (required)>'\n\nCaused by:\nLoadError: cannot load such file -- bundler/setup\n/Users/waiyanyoon/Documents/workspace/project/config/boot.rb:3:in `<top (required)>'\n/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `require_relative'\n/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `<top (required)>'\n/Users/waiyanyoon/Documents/workspace/project/Rakefile:4:in `<top (required)>'\n(See full trace by running task with --trace)\n\n\nSo now I replaced my rake  commands to use rails  instead for all my commands:\n\n$ rails jobs:workoff\n\n\nNow I can easily prevent the error above.","html":"<p>While it's programmed in my brain to use <code>rake</code> commands for migrations and tasks, I find it very useful to use <code>rails</code> command instead of <code>rake</code> which is introduced since Rails 5 to unify the use of rails commands. Using <code>rake</code> commands in Rails projects normally cause errors because of the bundler version:</p>\n<pre><code class=\"language-shell\">$ rake jobs:workoff\nrake aborted!\nGem::LoadError: You have already activated rake 12.3.1, but your Gemfile requires rake 12.3.0. Prepending `bundle exec` to your command may solve this.\n/Users/waiyanyoon/Documents/workspace/project/config/boot.rb:3:in `&lt;top (required)&gt;'\n/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `require_relative'\n/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `&lt;top (required)&gt;'\n/Users/waiyanyoon/Documents/workspace/project/Rakefile:4:in `&lt;top (required)&gt;'\n\nCaused by:\nLoadError: cannot load such file -- bundler/setup\n/Users/waiyanyoon/Documents/workspace/project/config/boot.rb:3:in `&lt;top (required)&gt;'\n/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `require_relative'\n/Users/waiyanyoon/Documents/workspace/project/config/application.rb:1:in `&lt;top (required)&gt;'\n/Users/waiyanyoon/Documents/workspace/project/Rakefile:4:in `&lt;top (required)&gt;'\n(See full trace by running task with --trace)\n</code></pre>\n<p>So now I replaced my <code>rake</code> commands to use <code>rails</code> instead for all my commands:</p>\n<pre><code class=\"language-shell\">$ rails jobs:workoff\n</code></pre>\n<p>Now I can easily prevent the error above.</p>\n","url":"http://waiyanyoon.com/still-using-rake-for-commands-in-your-rails-5-projects/","uuid":"0a6e3e29-f1e7-4e52-a41f-9efccc959b5c","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae07cf41e31635d585d655a"}},{"node":{"id":"Ghost__Post__5ae07c381e31635d585d6554","title":"Replacing Content Displayed in Active Admin Blank Slate","slug":"replacing-content-displayed-in-active-admin-blank-slate","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":"A small tip on rendering blank slate without new resource action link in Active Admin pages.","created_at_pretty":"25 April, 2018","published_at_pretty":"31 July, 2015","updated_at_pretty":"25 April, 2018","created_at":"2018-04-25T21:01:44.000+08:00","published_at":"2015-07-31T22:17:00.000+08:00","updated_at":"2018-04-25T21:03:36.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"active-admin","slug":"active-admin","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"There are tons of Active Admin workarounds available in the net but there are\nvery limited resource on manipulating the content to be displayed in the blank\nslate. One of it is the StackOverflow question which is not what I want. All I\nwant is to replace/manipulate the content as displayed inside the blank slate\ninstead of customizing it in per-page basis: Remove the \"Create new\" link.\n\n\nThere's a question that was asked in Google Groups but it's been few years but\nyet received any response, so I decided to create a monkey patch by overriding\nActive Admin source code. The code is placed in the /config/initializer folder\nof my Rails project as blank_slate.rb  so that the project loads up the patch\nfile without any configuration to load up a lib folder.\n\nBy patching the render_blank_slate  function and removing the join between the\nblank slate message and the \"Create One\" link as returned in blank_slate_link.","html":"<p>There are tons of Active Admin workarounds available in the net but there are very limited resource on manipulating the content to be displayed in the blank slate. One of it is the StackOverflow question which is not what I want. All I want is to replace/manipulate the content as displayed inside the blank slate instead of customizing it in per-page basis: Remove the &quot;Create new&quot; link.<br>\n<img src=\"https://s3.amazonaws.com/waiyanyoon.com/blank_slate_before.png\" alt=\"Before monkey patching\"></p>\n<p>There's a question that was asked in Google Groups but it's been few years but yet received any response, so I decided to create a monkey patch by overriding Active Admin source code. The code is placed in the /config/initializer folder of my Rails project as <code>blank_slate.rb</code> so that the project loads up the patch file without any configuration to load up a lib folder.</p>\n<script src=\"https://gist.github.com/yoonwaiyan/75caf90aa5c355eb3484.js\"></script>\n<p>By patching the <code>render_blank_slate</code> function and removing the join between the blank slate message and the &quot;Create One&quot; link as returned in <code>blank_slate_link</code>.<br>\n<img src=\"https://s3.amazonaws.com/waiyanyoon.com/blank_slate_after.png\" alt=\"After monkey patching\"></p>\n","url":"http://waiyanyoon.com/replacing-content-displayed-in-active-admin-blank-slate/","uuid":"c2236713-08fa-4945-ac34-06e147722d82","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae07c381e31635d585d6554"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pageNumber":0,"humanPageNumber":1,"skip":0,"limit":12,"numberOfPages":1,"previousPagePath":"","nextPagePath":""}}