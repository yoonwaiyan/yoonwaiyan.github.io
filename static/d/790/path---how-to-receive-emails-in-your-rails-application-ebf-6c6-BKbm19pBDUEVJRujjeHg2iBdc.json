{"data":{"ghostPost":{"id":"Ghost__Post__5b6d9c3dbd54885f920892c1","title":"How to Receive Emails in Your Rails Application","slug":"how-to-receive-emails-in-your-rails-application","featured":false,"feature_image":null,"excerpt":null,"custom_excerpt":null,"created_at_pretty":"10 August, 2018","published_at_pretty":"10 August, 2018","updated_at_pretty":"10 August, 2018","created_at":"2018-08-10T22:07:57.000+08:00","published_at":"2018-08-10T23:14:59.000+08:00","updated_at":"2018-08-10T23:15:28.000+08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Yoon Wai Yan","slug":"yoonwaiyan","bio":null,"profile_image":"http://waiyanyoon.com/content/images/2018/04/yoonwaiyan-1.jpeg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"rails","slug":"rails","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"There are times when a Rails app needs to receive emails to process the content,\nor grab the file from the attachment and process data within the file. In this\ncase griddler gem [https://github.com/thoughtbot/griddler]  would be the best\nbet to parse the incoming emails with its built-in controller action, but it\nseems tricky to follow through the documentations and I have to adapt an\napparent syntax change which caused an issue if I follow the instructions\nblindly. Here is my version of the guide, hope you find it helpful.\n\nThe first step is that you'll need to find an email deliver service provider to\nhelp receive and send your emails. Mailgun and SendGrid would be a good choice\nas they are free to use for small personal projects. After that, follow through\nthe instructions as given by the service so that they could properly receive and\nsend emails.\n\nAfter that, you'll need to setup the service to receive emails and \"forward\" it\nto your app. To test this out, you'll need to expose your local development web\nserver to the public through services such as localtunnel\n[https://localtunnel.github.io/www/]  or ngrok [https://ngrok.com/]. By default\ngriddler gem handles the incoming emails in /email_processor  route, so your\nsetup should include a setting to route your emails through HTTP request to your\nlocal web server, such as \nhttps://test-localtunnel-11.localtunnel.me/email_processor.\n\nNow finally it's time to dive in the code. The code snippets below are based on\nMailgun service that I configured personally, feel free to substitute with other\nadapters available to griddler.\n\nAdd these gems to your Gemfile:\n\ngem 'griddler'\ngem 'griddler-mailgun'\n\n\nAnd configure your griddler to use the adapter of your choice:\n\nGriddler.configure do |config|\n  config.email_service = :mailgun\nend\n\n\nAdd mount_griddler  for the simplest configuration provided by Griddler gem by\ndefault. This handles /email_processor  route that is handled by \nGriddler::EmailsController  controller provided by the gem.\n\nRails.application.routes.draw do\n  # ...\n  mount_griddler\nend\n\n\nAdd new file named app/models/email_processor.rb  with the following code as a\ntemplate. Note that this section is different from other guides as there seems\nto be a new syntax being introduced in the gem, as now an instance of \nEmailProcessor  class will be created before process  instance method is called\n(used to be a class method).\n\nclass EmailProcessor\n  def initialize(email)\n    @email = email\n  end\n\n  def process\n    puts \"received email from #{@email.from}:\"\n    p @email.body\n  end\nend\n\n\nNow you can try send an email to your configured domain and observe your local\nwebserver to make sure everything works fine. Advanced configurations (such as\nhandling the route manually or customize your email processor class) is\navailable at the gem README.\n\nHope this clarifies out the way to receive emails from your Rails app.\n\nExternal Readings:\n\n 1. Receiving Email in Your Rails App With Griddler\n    [https://sendgrid.com/blog/receiving-email-in-your-rails-app-with-griddler/]\n 2. Griddler is Better Than Ever!\n    [https://robots.thoughtbot.com/griddler-is-better-than-ever]\n 3. griddler gem [https://github.com/thoughtbot/griddler]","html":"<p>There are times when a Rails app needs to receive emails to process the content, or grab the file from the attachment and process data within the file. In this case <a href=\"https://github.com/thoughtbot/griddler\">griddler gem</a> would be the best bet to parse the incoming emails with its built-in controller action, but it seems tricky to follow through the documentations and I have to adapt an apparent syntax change which caused an issue if I follow the instructions blindly. Here is my version of the guide, hope you find it helpful.</p>\n<p>The first step is that you'll need to find an email deliver service provider to help receive and send your emails. Mailgun and SendGrid would be a good choice as they are free to use for small personal projects. After that, follow through the instructions as given by the service so that they could properly receive and send emails.</p>\n<p>After that, you'll need to setup the service to receive emails and &quot;forward&quot; it to your app. To test this out, you'll need to expose your local development web server to the public through services such as <a href=\"https://localtunnel.github.io/www/\">localtunnel</a> or <a href=\"https://ngrok.com/\">ngrok</a>. By default griddler gem handles the incoming emails in <code>/email_processor</code> route, so your setup should include a setting to route your emails through HTTP request to your local web server, such as <code>https://test-localtunnel-11.localtunnel.me/email_processor</code>.</p>\n<p>Now finally it's time to dive in the code. The code snippets below are based on Mailgun service that I configured personally, feel free to substitute with other adapters available to griddler.</p>\n<p>Add these gems to your Gemfile:</p>\n<pre><code>gem 'griddler'\ngem 'griddler-mailgun'\n</code></pre>\n<p>And configure your griddler to use the adapter of your choice:</p>\n<pre><code class=\"language-ruby\">Griddler.configure do |config|\n  config.email_service = :mailgun\nend\n</code></pre>\n<p>Add <code>mount_griddler</code> for the simplest configuration provided by Griddler gem by default. This handles <code>/email_processor</code> route that is handled by <code>Griddler::EmailsController</code> controller provided by the gem.</p>\n<pre><code class=\"language-ruby\">Rails.application.routes.draw do\n  # ...\n  mount_griddler\nend\n</code></pre>\n<p>Add new file named <code>app/models/email_processor.rb</code> with the following code as a template. Note that this section is different from other guides as there seems to be a new syntax being introduced in the gem, as now an instance of <code>EmailProcessor</code> class will be created before <code>process</code> instance method is called (used to be a class method).</p>\n<pre><code class=\"language-ruby\">class EmailProcessor\n  def initialize(email)\n    @email = email\n  end\n\n  def process\n    puts &quot;received email from #{@email.from}:&quot;\n    p @email.body\n  end\nend\n</code></pre>\n<p>Now you can try send an email to your configured domain and observe your local webserver to make sure everything works fine. Advanced configurations (such as handling the route manually or customize your email processor class) is available at the gem README.</p>\n<p>Hope this clarifies out the way to receive emails from your Rails app.</p>\n<p>External Readings:</p>\n<ol>\n<li><a href=\"https://sendgrid.com/blog/receiving-email-in-your-rails-app-with-griddler/\">Receiving Email in Your Rails App With Griddler</a></li>\n<li><a href=\"https://robots.thoughtbot.com/griddler-is-better-than-ever\">Griddler is Better Than Ever!</a></li>\n<li><a href=\"https://github.com/thoughtbot/griddler\">griddler gem</a></li>\n</ol>\n","url":"http://waiyanyoon.com/how-to-receive-emails-in-your-rails-application/","uuid":"a07f4bb2-14cd-40de-986e-bcfa2edfead7","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b6d9c3dbd54885f920892c1"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"how-to-receive-emails-in-your-rails-application"}}